
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COLON COMMA CTEC CTEF CTEI CTESTRING DIFFERENT DIVISION ELSE END EQUALS FLOAT FOR FROM FUNCTION GTHAN GTHANEQ ID IF INT LBRACKET LPARENTHESIS LSQRBRACKET LTHAN LTHANEQ MAIN MINUS MULTIPLICATION OR PLUS PRINT PROGRAM QUOTE RBRACKET READ RETURN RPARENTHESIS RSQRBRACKET SEMICOLON STRING THEN TO VAR VOID WHILE\n    programa : PROGRAM ID SEMICOLON programa1\n    \n    programa1 : decvars bloque programa2\n    programa1 : decvars bloque\n  \t\t\t  | programa2\n    \n    programa2 :  principal\n    \n    principal : MAIN LPARENTHESIS parameters RPARENTHESIS LBRACKET decvars estatuto RBRACKET END\n    \n\tdecvars : multivars\n\t\t\t| empty\n\t\n\tmultivars : vars \n\t\t\t| vars multivars\n\t\n    vars : VAR tipo ID SEMICOLON \n    \t | VAR tipo ID vars1\n    \t | VAR tipo ID arr SEMICOLON\n    \t | VAR tipo ID arr vars1 \n    \n\tvars1 : COMMA ID vars1\n\t\t  | COMMA ID SEMICOLON\n\t\t  | COMMA ID arr vars1 \n\t\t  | COMMA ID arr SEMICOLON\n\n\t\n    tipo : INT \n        | FLOAT\n        | CHAR \n        | STRING\n    \n\tarr : LSQRBRACKET CTEI RSQRBRACKET\n\t\n    parameters : parameters2\n    \t| empty\n    \n\tparameters2 : tipo ID\n\t\t| tipo ID parameters3 \n\t\n\tparameters3 : COMMA ID parameters3\n\t\t\t| COMMA tipo ID parameters3\n\t\t\t| COMMA ID\n\t\t\t| COMMA tipo ID\n\t\n    bloque : funcion\n    \t| funcion bloque \n    \t| empty\n    \n    \n\tfuncion : FUNCTION tipo ID LPARENTHESIS parameters RPARENTHESIS LBRACKET decvars estatuto retorno RBRACKET\n\t\t| FUNCTION VOID ID LPARENTHESIS parameters RPARENTHESIS LBRACKET decvars estatuto RBRACKET\n\t\n\tretorno : RETURN ID SEMICOLON\n\t\n    estatuto : estatuto2 \n    \t| empty\n    \n\testatuto2 : estatuto3\n\t\t| estatuto3 estatuto2 \n\t\n    estatuto3 : asignacion SEMICOLON\n                | llamada SEMICOLON\n                | lectura SEMICOLON\n                | escritura SEMICOLON\n                | for\n                | if\n                | while\n    \n\tasignacion : ID EQUALS expresion \n\t\t| ID arr EQUALS expresion\n\t\n\tllamada : ID LPARENTHESIS expresion RPARENTHESIS \n\t\n\tlectura : READ LPARENTHESIS leevars RPARENTHESIS\n\t\n\tleevars : ID\n\t\t| ID COMMA leevars\n\t\t| ID arr\n\t\t| ID arr COMMA leevars\n\t\n\tescritura : PRINT LPARENTHESIS escritura1 RPARENTHESIS\n\t\n\tescritura1 : escritura2 \n\t\t| escritura2 COMMA escritura1\n\t\n\tescritura2 : CTEI\n\t\t| CTEF\n\t\t| CTESTRING\n\t\t| CTEC\n\t\t| expresion \n\t\n\tfor : FOR LPARENTHESIS FROM asignacion COMMA TO expresion RPARENTHESIS LBRACKET estatuto RBRACKET\n\t\n\tif : IF LPARENTHESIS expresion RPARENTHESIS THEN LBRACKET estatuto RBRACKET\n\t\t| IF LPARENTHESIS expresion RPARENTHESIS THEN LBRACKET estatuto RBRACKET else  \n\n\t\n\telse : ELSE LBRACKET estatuto RBRACKET\n\t\t| empty\n\t\n\twhile : WHILE LPARENTHESIS expresion RPARENTHESIS LBRACKET estatuto RBRACKET\n\t\n \texpresion : expresion1\n \t\t| expresion1 OR expresion1\n \t\n\texpresion1 : expresion2\n\t\t| expresion2 AND expresion2\n\t\n\texpresion2 : suma\n\t\t| suma expresioncomp suma\n\t\n    expresioncomp : suma GTHAN suma\n             | suma LTHAN suma\n             | suma GTHANEQ suma\n             | suma LTHANEQ suma\n             | suma DIFFERENT suma \t\n\t\n\tsuma : multiplicacion\n\t\t| multiplicacion PLUS multiplicacion\n\t\t| multiplicacion MINUS multiplicacion\n\t\n\tmultiplicacion : expresion3\n\t\t| expresion3 MULTIPLICATION expresion3\n\t\t| expresion3 DIVISION expresion3\n\t\n\texpresion3 : CTEI\n    \t| CTEF\n    \t| CTEC\n    \t| CTESTRING\n    \t| LPARENTHESIS expresion3 RPARENTHESIS\n    \t| llamada\n    \t| leevars\n\t\n    empty : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,4,5,6,7,8,9,10,11,14,15,16,18,25,26,38,39,48,49,57,58,82,83,103,156,176,],[0,-95,-1,-95,-4,-7,-8,-5,-9,-3,-32,-34,-10,-2,-33,-11,-12,-13,-14,-15,-16,-17,-18,-6,-36,-35,]),'ID':([2,8,9,11,18,20,21,22,23,24,27,28,32,38,39,41,45,47,48,49,54,56,57,58,60,66,71,72,73,82,83,84,85,88,89,90,91,92,94,95,96,98,99,101,102,104,108,109,110,111,112,113,114,115,116,117,118,121,124,125,126,127,129,134,135,136,137,139,140,141,142,143,146,149,155,157,158,161,162,163,164,165,167,168,169,170,171,175,178,179,180,181,182,183,184,185,190,192,193,194,196,198,199,201,],[3,-7,-8,-9,-10,33,-19,-20,-21,-22,34,35,37,-11,-12,50,-95,55,-13,-14,74,81,-15,-16,-23,74,-46,-47,-48,-17,-18,-95,-95,-42,-43,-44,-45,104,104,121,104,104,104,74,74,-53,104,-82,-85,-88,-89,-90,-91,104,-93,-94,104,-53,-88,-89,-91,-90,151,121,-55,104,104,104,104,104,104,104,-51,104,177,-54,121,104,104,104,104,104,-83,-84,-86,-87,-92,74,-56,-77,-78,-79,-80,-81,104,74,-70,-66,74,-67,-69,74,-65,-68,]),'SEMICOLON':([3,33,40,50,59,60,67,68,69,70,104,105,106,107,108,109,110,111,112,113,114,116,117,121,135,145,146,147,148,157,159,160,166,167,168,169,170,171,177,178,],[4,38,48,58,83,-23,88,89,90,91,-53,-49,-71,-73,-75,-82,-85,-88,-89,-90,-91,-93,-94,-53,-55,-50,-51,-52,-57,-54,-72,-74,-76,-83,-84,-86,-87,-92,187,-56,]),'FUNCTION':([4,6,8,9,11,15,18,38,39,48,49,57,58,82,83,156,176,],[-95,17,-7,-8,-9,17,-10,-11,-12,-13,-14,-15,-16,-17,-18,-36,-35,]),'MAIN':([4,6,8,9,11,14,15,16,18,26,38,39,48,49,57,58,82,83,156,176,],[12,-95,-7,-8,-9,12,-32,-34,-10,-33,-11,-12,-13,-14,-15,-16,-17,-18,-36,-35,]),'VAR':([4,11,38,39,45,48,49,57,58,82,83,84,85,],[13,13,-11,-12,13,-13,-14,-15,-16,-17,-18,13,13,]),'READ':([8,9,11,18,38,39,45,48,49,54,57,58,66,71,72,73,82,83,84,85,88,89,90,91,101,102,175,185,190,192,193,194,196,198,199,201,],[-7,-8,-9,-10,-11,-12,-95,-13,-14,75,-15,-16,75,-46,-47,-48,-17,-18,-95,-95,-42,-43,-44,-45,75,75,75,75,-70,-66,75,-67,-69,75,-65,-68,]),'PRINT':([8,9,11,18,38,39,45,48,49,54,57,58,66,71,72,73,82,83,84,85,88,89,90,91,101,102,175,185,190,192,193,194,196,198,199,201,],[-7,-8,-9,-10,-11,-12,-95,-13,-14,76,-15,-16,76,-46,-47,-48,-17,-18,-95,-95,-42,-43,-44,-45,76,76,76,76,-70,-66,76,-67,-69,76,-65,-68,]),'FOR':([8,9,11,18,38,39,45,48,49,54,57,58,66,71,72,73,82,83,84,85,88,89,90,91,101,102,175,185,190,192,193,194,196,198,199,201,],[-7,-8,-9,-10,-11,-12,-95,-13,-14,77,-15,-16,77,-46,-47,-48,-17,-18,-95,-95,-42,-43,-44,-45,77,77,77,77,-70,-66,77,-67,-69,77,-65,-68,]),'IF':([8,9,11,18,38,39,45,48,49,54,57,58,66,71,72,73,82,83,84,85,88,89,90,91,101,102,175,185,190,192,193,194,196,198,199,201,],[-7,-8,-9,-10,-11,-12,-95,-13,-14,78,-15,-16,78,-46,-47,-48,-17,-18,-95,-95,-42,-43,-44,-45,78,78,78,78,-70,-66,78,-67,-69,78,-65,-68,]),'WHILE':([8,9,11,18,38,39,45,48,49,54,57,58,66,71,72,73,82,83,84,85,88,89,90,91,101,102,175,185,190,192,193,194,196,198,199,201,],[-7,-8,-9,-10,-11,-12,-95,-13,-14,79,-15,-16,79,-46,-47,-48,-17,-18,-95,-95,-42,-43,-44,-45,79,79,79,79,-70,-66,79,-67,-69,79,-65,-68,]),'RBRACKET':([8,9,11,18,38,39,45,48,49,54,57,58,63,64,65,66,71,72,73,82,83,85,87,88,89,90,91,102,133,154,175,185,186,187,189,190,192,193,194,196,197,198,199,200,201,],[-7,-8,-9,-10,-11,-12,-95,-13,-14,-95,-15,-16,86,-38,-39,-40,-46,-47,-48,-17,-18,-95,-41,-42,-43,-44,-45,-95,156,176,-95,-95,190,-37,192,-70,-66,-95,-67,-69,199,-95,-65,201,-68,]),'RETURN':([8,9,11,18,38,39,48,49,57,58,64,65,66,71,72,73,82,83,84,87,88,89,90,91,101,132,190,192,194,196,199,201,],[-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-38,-39,-40,-46,-47,-48,-17,-18,-95,-41,-42,-43,-44,-45,-95,155,-70,-66,-67,-69,-65,-68,]),'LPARENTHESIS':([12,34,35,60,74,75,76,77,78,79,92,94,96,98,99,104,108,109,110,111,112,113,114,115,116,117,118,121,124,125,126,127,135,136,137,139,140,141,142,143,146,149,157,161,162,163,164,165,167,168,169,170,171,178,179,180,181,182,183,184,],[19,43,44,-23,94,95,96,97,98,99,115,115,115,115,115,94,115,-82,-85,-88,-89,-90,-91,115,-93,-94,115,-53,-88,-89,-91,-90,-55,115,115,115,115,115,115,115,-51,115,-54,115,115,115,115,115,-83,-84,-86,-87,-92,-56,-77,-78,-79,-80,-81,115,]),'INT':([13,17,19,43,44,47,],[21,21,21,21,21,21,]),'FLOAT':([13,17,19,43,44,47,],[22,22,22,22,22,22,]),'CHAR':([13,17,19,43,44,47,],[23,23,23,23,23,23,]),'STRING':([13,17,19,43,44,47,],[24,24,24,24,24,24,]),'VOID':([17,],[28,]),'RPARENTHESIS':([19,29,30,31,37,43,44,46,52,53,55,60,80,81,100,104,106,107,108,109,110,111,112,113,114,116,117,119,120,121,122,123,124,125,126,127,128,130,131,135,144,146,157,159,160,166,167,168,169,170,171,172,178,188,],[-95,36,-24,-25,-26,-95,-95,-27,61,62,-30,-23,-28,-31,-29,-53,-71,-73,-75,-82,-85,-88,-89,-90,-91,-93,-94,146,147,-53,148,-58,-60,-61,-62,-63,-64,152,153,-55,171,-51,-54,-72,-74,-76,-83,-84,-86,-87,-92,-59,-56,191,]),'COMMA':([33,37,40,50,55,59,60,81,104,105,106,107,108,109,110,111,112,113,114,116,117,121,123,124,125,126,127,128,135,145,146,150,157,159,160,166,167,168,169,170,171,178,],[41,47,41,41,47,41,-23,47,134,-49,-71,-73,-75,-82,-85,-88,-89,-90,-91,-93,-94,134,149,-60,-61,-62,-63,-64,158,-50,-51,173,-54,-72,-74,-76,-83,-84,-86,-87,-92,-56,]),'LSQRBRACKET':([33,50,74,104,121,151,],[42,42,42,42,42,42,]),'LBRACKET':([36,61,62,153,174,191,195,],[45,84,85,175,185,193,198,]),'CTEI':([42,60,92,94,96,98,99,104,108,109,110,111,112,113,114,115,116,117,118,121,124,125,126,127,135,136,137,139,140,141,142,143,146,149,157,161,162,163,164,165,167,168,169,170,171,178,179,180,181,182,183,184,],[51,-23,111,111,124,111,111,-53,111,-82,-85,-88,-89,-90,-91,111,-93,-94,111,-53,-88,-89,-91,-90,-55,111,111,111,111,111,111,111,-51,124,-54,111,111,111,111,111,-83,-84,-86,-87,-92,-56,-77,-78,-79,-80,-81,111,]),'RSQRBRACKET':([51,],[60,]),'EQUALS':([60,74,93,151,],[-23,92,118,92,]),'MULTIPLICATION':([60,104,110,111,112,113,114,116,117,121,124,125,126,127,135,146,157,171,178,],[-23,-53,142,-88,-89,-90,-91,-93,-94,-53,-88,-89,-91,-90,-55,-51,-54,-92,-56,]),'DIVISION':([60,104,110,111,112,113,114,116,117,121,124,125,126,127,135,146,157,171,178,],[-23,-53,143,-88,-89,-90,-91,-93,-94,-53,-88,-89,-91,-90,-55,-51,-54,-92,-56,]),'PLUS':([60,104,109,110,111,112,113,114,116,117,121,124,125,126,127,135,146,157,169,170,171,178,],[-23,-53,140,-85,-88,-89,-90,-91,-93,-94,-53,-88,-89,-91,-90,-55,-51,-54,-86,-87,-92,-56,]),'MINUS':([60,104,109,110,111,112,113,114,116,117,121,124,125,126,127,135,146,157,169,170,171,178,],[-23,-53,141,-85,-88,-89,-90,-91,-93,-94,-53,-88,-89,-91,-90,-55,-51,-54,-86,-87,-92,-56,]),'CTEF':([60,92,94,96,98,99,104,108,109,110,111,112,113,114,115,116,117,118,121,124,125,126,127,135,136,137,139,140,141,142,143,146,149,157,161,162,163,164,165,167,168,169,170,171,178,179,180,181,182,183,184,],[-23,112,112,125,112,112,-53,112,-82,-85,-88,-89,-90,-91,112,-93,-94,112,-53,-88,-89,-91,-90,-55,112,112,112,112,112,112,112,-51,125,-54,112,112,112,112,112,-83,-84,-86,-87,-92,-56,-77,-78,-79,-80,-81,112,]),'CTEC':([60,92,94,96,98,99,104,108,109,110,111,112,113,114,115,116,117,118,121,124,125,126,127,135,136,137,139,140,141,142,143,146,149,157,161,162,163,164,165,167,168,169,170,171,178,179,180,181,182,183,184,],[-23,113,113,127,113,113,-53,113,-82,-85,-88,-89,-90,-91,113,-93,-94,113,-53,-88,-89,-91,-90,-55,113,113,113,113,113,113,113,-51,127,-54,113,113,113,113,113,-83,-84,-86,-87,-92,-56,-77,-78,-79,-80,-81,113,]),'CTESTRING':([60,92,94,96,98,99,104,108,109,110,111,112,113,114,115,116,117,118,121,124,125,126,127,135,136,137,139,140,141,142,143,146,149,157,161,162,163,164,165,167,168,169,170,171,178,179,180,181,182,183,184,],[-23,114,114,126,114,114,-53,114,-82,-85,-88,-89,-90,-91,114,-93,-94,114,-53,-88,-89,-91,-90,-55,114,114,114,114,114,114,114,-51,126,-54,114,114,114,114,114,-83,-84,-86,-87,-92,-56,-77,-78,-79,-80,-81,114,]),'AND':([60,104,107,108,109,110,111,112,113,114,116,117,121,124,125,126,127,135,146,157,166,167,168,169,170,171,178,],[-23,-53,137,-75,-82,-85,-88,-89,-90,-91,-93,-94,-53,-88,-89,-91,-90,-55,-51,-54,-76,-83,-84,-86,-87,-92,-56,]),'OR':([60,104,106,107,108,109,110,111,112,113,114,116,117,121,124,125,126,127,135,146,157,160,166,167,168,169,170,171,178,],[-23,-53,136,-73,-75,-82,-85,-88,-89,-90,-91,-93,-94,-53,-88,-89,-91,-90,-55,-51,-54,-74,-76,-83,-84,-86,-87,-92,-56,]),'GTHAN':([60,104,109,110,111,112,113,114,116,117,121,135,138,146,157,167,168,169,170,171,178,],[-23,-53,-82,-85,-88,-89,-90,-91,-93,-94,-53,-55,161,-51,-54,-83,-84,-86,-87,-92,-56,]),'LTHAN':([60,104,109,110,111,112,113,114,116,117,121,135,138,146,157,167,168,169,170,171,178,],[-23,-53,-82,-85,-88,-89,-90,-91,-93,-94,-53,-55,162,-51,-54,-83,-84,-86,-87,-92,-56,]),'GTHANEQ':([60,104,109,110,111,112,113,114,116,117,121,135,138,146,157,167,168,169,170,171,178,],[-23,-53,-82,-85,-88,-89,-90,-91,-93,-94,-53,-55,163,-51,-54,-83,-84,-86,-87,-92,-56,]),'LTHANEQ':([60,104,109,110,111,112,113,114,116,117,121,135,138,146,157,167,168,169,170,171,178,],[-23,-53,-82,-85,-88,-89,-90,-91,-93,-94,-53,-55,164,-51,-54,-83,-84,-86,-87,-92,-56,]),'DIFFERENT':([60,104,109,110,111,112,113,114,116,117,121,135,138,146,157,167,168,169,170,171,178,],[-23,-53,-82,-85,-88,-89,-90,-91,-93,-94,-53,-55,165,-51,-54,-83,-84,-86,-87,-92,-56,]),'END':([86,],[103,]),'FROM':([97,],[129,]),'THEN':([152,],[174,]),'TO':([173,],[184,]),'ELSE':([192,],[195,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'programa1':([4,],[5,]),'decvars':([4,45,84,85,],[6,54,101,102,]),'programa2':([4,14,],[7,25,]),'multivars':([4,11,45,84,85,],[8,18,8,8,8,]),'empty':([4,6,15,19,43,44,45,54,84,85,101,102,175,185,192,193,198,],[9,16,16,31,31,31,9,65,9,9,65,65,65,65,196,65,65,]),'principal':([4,14,],[10,10,]),'vars':([4,11,45,84,85,],[11,11,11,11,11,]),'bloque':([6,15,],[14,26,]),'funcion':([6,15,],[15,15,]),'tipo':([13,17,19,43,44,47,],[20,27,32,32,32,56,]),'parameters':([19,43,44,],[29,52,53,]),'parameters2':([19,43,44,],[30,30,30,]),'vars1':([33,40,50,59,],[39,49,57,82,]),'arr':([33,50,74,104,121,151,],[40,59,93,135,135,93,]),'parameters3':([37,55,81,],[46,80,100,]),'estatuto':([54,101,102,175,185,193,198,],[63,132,133,186,189,197,200,]),'estatuto2':([54,66,101,102,175,185,193,198,],[64,87,64,64,64,64,64,64,]),'estatuto3':([54,66,101,102,175,185,193,198,],[66,66,66,66,66,66,66,66,]),'asignacion':([54,66,101,102,129,175,185,193,198,],[67,67,67,67,150,67,67,67,67,]),'llamada':([54,66,92,94,96,98,99,101,102,108,115,118,136,137,139,140,141,142,143,149,161,162,163,164,165,175,184,185,193,198,],[68,68,116,116,116,116,116,68,68,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,68,116,68,68,68,]),'lectura':([54,66,101,102,175,185,193,198,],[69,69,69,69,69,69,69,69,]),'escritura':([54,66,101,102,175,185,193,198,],[70,70,70,70,70,70,70,70,]),'for':([54,66,101,102,175,185,193,198,],[71,71,71,71,71,71,71,71,]),'if':([54,66,101,102,175,185,193,198,],[72,72,72,72,72,72,72,72,]),'while':([54,66,101,102,175,185,193,198,],[73,73,73,73,73,73,73,73,]),'expresion':([92,94,96,98,99,118,149,184,],[105,119,128,130,131,145,128,188,]),'expresion1':([92,94,96,98,99,118,136,149,184,],[106,106,106,106,106,106,159,106,106,]),'expresion2':([92,94,96,98,99,118,136,137,149,184,],[107,107,107,107,107,107,107,160,107,107,]),'suma':([92,94,96,98,99,108,118,136,137,139,149,161,162,163,164,165,184,],[108,108,108,108,108,138,108,108,108,166,108,179,180,181,182,183,108,]),'multiplicacion':([92,94,96,98,99,108,118,136,137,139,140,141,149,161,162,163,164,165,184,],[109,109,109,109,109,109,109,109,109,109,167,168,109,109,109,109,109,109,109,]),'expresion3':([92,94,96,98,99,108,115,118,136,137,139,140,141,142,143,149,161,162,163,164,165,184,],[110,110,110,110,110,110,144,110,110,110,110,110,110,169,170,110,110,110,110,110,110,110,]),'leevars':([92,94,95,96,98,99,108,115,118,134,136,137,139,140,141,142,143,149,158,161,162,163,164,165,184,],[117,117,120,117,117,117,117,117,117,157,117,117,117,117,117,117,117,117,178,117,117,117,117,117,117,]),'escritura1':([96,149,],[122,172,]),'escritura2':([96,149,],[123,123,]),'expresioncomp':([108,],[139,]),'retorno':([132,],[154,]),'else':([192,],[194,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON programa1','programa',4,'p_programa','LexSint.py',169),
  ('programa1 -> decvars bloque programa2','programa1',3,'p_programa1','LexSint.py',174),
  ('programa1 -> decvars bloque','programa1',2,'p_programa1','LexSint.py',175),
  ('programa1 -> programa2','programa1',1,'p_programa1','LexSint.py',176),
  ('programa2 -> principal','programa2',1,'p_programa2','LexSint.py',180),
  ('principal -> MAIN LPARENTHESIS parameters RPARENTHESIS LBRACKET decvars estatuto RBRACKET END','principal',9,'p_principal','LexSint.py',184),
  ('decvars -> multivars','decvars',1,'p_decvars','LexSint.py',188),
  ('decvars -> empty','decvars',1,'p_decvars','LexSint.py',189),
  ('multivars -> vars','multivars',1,'p_multivars','LexSint.py',193),
  ('multivars -> vars multivars','multivars',2,'p_multivars','LexSint.py',194),
  ('vars -> VAR tipo ID SEMICOLON','vars',4,'p_vars','LexSint.py',198),
  ('vars -> VAR tipo ID vars1','vars',4,'p_vars','LexSint.py',199),
  ('vars -> VAR tipo ID arr SEMICOLON','vars',5,'p_vars','LexSint.py',200),
  ('vars -> VAR tipo ID arr vars1','vars',5,'p_vars','LexSint.py',201),
  ('vars1 -> COMMA ID vars1','vars1',3,'p_vars1','LexSint.py',205),
  ('vars1 -> COMMA ID SEMICOLON','vars1',3,'p_vars1','LexSint.py',206),
  ('vars1 -> COMMA ID arr vars1','vars1',4,'p_vars1','LexSint.py',207),
  ('vars1 -> COMMA ID arr SEMICOLON','vars1',4,'p_vars1','LexSint.py',208),
  ('tipo -> INT','tipo',1,'p_tipo','LexSint.py',213),
  ('tipo -> FLOAT','tipo',1,'p_tipo','LexSint.py',214),
  ('tipo -> CHAR','tipo',1,'p_tipo','LexSint.py',215),
  ('tipo -> STRING','tipo',1,'p_tipo','LexSint.py',216),
  ('arr -> LSQRBRACKET CTEI RSQRBRACKET','arr',3,'p_arr','LexSint.py',220),
  ('parameters -> parameters2','parameters',1,'p_parameters','LexSint.py',224),
  ('parameters -> empty','parameters',1,'p_parameters','LexSint.py',225),
  ('parameters2 -> tipo ID','parameters2',2,'p_parameters2','LexSint.py',229),
  ('parameters2 -> tipo ID parameters3','parameters2',3,'p_parameters2','LexSint.py',230),
  ('parameters3 -> COMMA ID parameters3','parameters3',3,'p_parameters3','LexSint.py',234),
  ('parameters3 -> COMMA tipo ID parameters3','parameters3',4,'p_parameters3','LexSint.py',235),
  ('parameters3 -> COMMA ID','parameters3',2,'p_parameters3','LexSint.py',236),
  ('parameters3 -> COMMA tipo ID','parameters3',3,'p_parameters3','LexSint.py',237),
  ('bloque -> funcion','bloque',1,'p_bloque','LexSint.py',241),
  ('bloque -> funcion bloque','bloque',2,'p_bloque','LexSint.py',242),
  ('bloque -> empty','bloque',1,'p_bloque','LexSint.py',243),
  ('funcion -> FUNCTION tipo ID LPARENTHESIS parameters RPARENTHESIS LBRACKET decvars estatuto retorno RBRACKET','funcion',11,'p_funcion','LexSint.py',248),
  ('funcion -> FUNCTION VOID ID LPARENTHESIS parameters RPARENTHESIS LBRACKET decvars estatuto RBRACKET','funcion',10,'p_funcion','LexSint.py',249),
  ('retorno -> RETURN ID SEMICOLON','retorno',3,'p_retorno','LexSint.py',253),
  ('estatuto -> estatuto2','estatuto',1,'p_estatuto','LexSint.py',257),
  ('estatuto -> empty','estatuto',1,'p_estatuto','LexSint.py',258),
  ('estatuto2 -> estatuto3','estatuto2',1,'p_estatuto2','LexSint.py',262),
  ('estatuto2 -> estatuto3 estatuto2','estatuto2',2,'p_estatuto2','LexSint.py',263),
  ('estatuto3 -> asignacion SEMICOLON','estatuto3',2,'p_estatuto3','LexSint.py',267),
  ('estatuto3 -> llamada SEMICOLON','estatuto3',2,'p_estatuto3','LexSint.py',268),
  ('estatuto3 -> lectura SEMICOLON','estatuto3',2,'p_estatuto3','LexSint.py',269),
  ('estatuto3 -> escritura SEMICOLON','estatuto3',2,'p_estatuto3','LexSint.py',270),
  ('estatuto3 -> for','estatuto3',1,'p_estatuto3','LexSint.py',271),
  ('estatuto3 -> if','estatuto3',1,'p_estatuto3','LexSint.py',272),
  ('estatuto3 -> while','estatuto3',1,'p_estatuto3','LexSint.py',273),
  ('asignacion -> ID EQUALS expresion','asignacion',3,'p_asignacion','LexSint.py',277),
  ('asignacion -> ID arr EQUALS expresion','asignacion',4,'p_asignacion','LexSint.py',278),
  ('llamada -> ID LPARENTHESIS expresion RPARENTHESIS','llamada',4,'p_llamada','LexSint.py',282),
  ('lectura -> READ LPARENTHESIS leevars RPARENTHESIS','lectura',4,'p_lectura','LexSint.py',286),
  ('leevars -> ID','leevars',1,'p_leevars','LexSint.py',290),
  ('leevars -> ID COMMA leevars','leevars',3,'p_leevars','LexSint.py',291),
  ('leevars -> ID arr','leevars',2,'p_leevars','LexSint.py',292),
  ('leevars -> ID arr COMMA leevars','leevars',4,'p_leevars','LexSint.py',293),
  ('escritura -> PRINT LPARENTHESIS escritura1 RPARENTHESIS','escritura',4,'p_escritura','LexSint.py',297),
  ('escritura1 -> escritura2','escritura1',1,'p_escritura1','LexSint.py',301),
  ('escritura1 -> escritura2 COMMA escritura1','escritura1',3,'p_escritura1','LexSint.py',302),
  ('escritura2 -> CTEI','escritura2',1,'p_escritura2','LexSint.py',306),
  ('escritura2 -> CTEF','escritura2',1,'p_escritura2','LexSint.py',307),
  ('escritura2 -> CTESTRING','escritura2',1,'p_escritura2','LexSint.py',308),
  ('escritura2 -> CTEC','escritura2',1,'p_escritura2','LexSint.py',309),
  ('escritura2 -> expresion','escritura2',1,'p_escritura2','LexSint.py',310),
  ('for -> FOR LPARENTHESIS FROM asignacion COMMA TO expresion RPARENTHESIS LBRACKET estatuto RBRACKET','for',11,'p_for','LexSint.py',314),
  ('if -> IF LPARENTHESIS expresion RPARENTHESIS THEN LBRACKET estatuto RBRACKET','if',8,'p_if','LexSint.py',318),
  ('if -> IF LPARENTHESIS expresion RPARENTHESIS THEN LBRACKET estatuto RBRACKET else','if',9,'p_if','LexSint.py',319),
  ('else -> ELSE LBRACKET estatuto RBRACKET','else',4,'p_else','LexSint.py',324),
  ('else -> empty','else',1,'p_else','LexSint.py',325),
  ('while -> WHILE LPARENTHESIS expresion RPARENTHESIS LBRACKET estatuto RBRACKET','while',7,'p_while','LexSint.py',329),
  ('expresion -> expresion1','expresion',1,'p_expresion','LexSint.py',333),
  ('expresion -> expresion1 OR expresion1','expresion',3,'p_expresion','LexSint.py',334),
  ('expresion1 -> expresion2','expresion1',1,'p_expresion1','LexSint.py',338),
  ('expresion1 -> expresion2 AND expresion2','expresion1',3,'p_expresion1','LexSint.py',339),
  ('expresion2 -> suma','expresion2',1,'p_expresion2','LexSint.py',343),
  ('expresion2 -> suma expresioncomp suma','expresion2',3,'p_expresion2','LexSint.py',344),
  ('expresioncomp -> suma GTHAN suma','expresioncomp',3,'p_expresioncomp','LexSint.py',348),
  ('expresioncomp -> suma LTHAN suma','expresioncomp',3,'p_expresioncomp','LexSint.py',349),
  ('expresioncomp -> suma GTHANEQ suma','expresioncomp',3,'p_expresioncomp','LexSint.py',350),
  ('expresioncomp -> suma LTHANEQ suma','expresioncomp',3,'p_expresioncomp','LexSint.py',351),
  ('expresioncomp -> suma DIFFERENT suma','expresioncomp',3,'p_expresioncomp','LexSint.py',352),
  ('suma -> multiplicacion','suma',1,'p_suma','LexSint.py',356),
  ('suma -> multiplicacion PLUS multiplicacion','suma',3,'p_suma','LexSint.py',357),
  ('suma -> multiplicacion MINUS multiplicacion','suma',3,'p_suma','LexSint.py',358),
  ('multiplicacion -> expresion3','multiplicacion',1,'p_multiplicacion','LexSint.py',362),
  ('multiplicacion -> expresion3 MULTIPLICATION expresion3','multiplicacion',3,'p_multiplicacion','LexSint.py',363),
  ('multiplicacion -> expresion3 DIVISION expresion3','multiplicacion',3,'p_multiplicacion','LexSint.py',364),
  ('expresion3 -> CTEI','expresion3',1,'p_expresion3','LexSint.py',368),
  ('expresion3 -> CTEF','expresion3',1,'p_expresion3','LexSint.py',369),
  ('expresion3 -> CTEC','expresion3',1,'p_expresion3','LexSint.py',370),
  ('expresion3 -> CTESTRING','expresion3',1,'p_expresion3','LexSint.py',371),
  ('expresion3 -> LPARENTHESIS expresion3 RPARENTHESIS','expresion3',3,'p_expresion3','LexSint.py',372),
  ('expresion3 -> llamada','expresion3',1,'p_expresion3','LexSint.py',373),
  ('expresion3 -> leevars','expresion3',1,'p_expresion3','LexSint.py',374),
  ('empty -> <empty>','empty',0,'p_empty','LexSint.py',378),
]
