
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLICATIONDIVISIONrightEQUALleftANDORAND CHAR COMMA CTEC CTEF CTEI CTESTRING DIFFERENT DIVISION ELSE END EQUAL EQUALS FLOAT FOR FROM FUNCTION GTHAN GTHANEQ ID IF INT LBRACKET LPARENTHESIS LSQRBRACKET LTHAN LTHANEQ MAIN MINUS MULTIPLICATION OR PLUS PRINT PROGRAM RBRACKET READ RETURN RPARENTHESIS RSQRBRACKET SEMICOLON STRING THEN TO VAR VOID WHILE\n    programa : PROGRAM ID addProgram SEMICOLON programa1 END\n     addProgram : \n    programa1 : vars funcion principal \n    \n    principal : MAIN addMain LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto RBRACKET\n     addMain : \n    vars : VAR vars1\n        | empty\n    \n    vars1 : tipo vars2 SEMICOLON varsadd\n    \n    vars2 : ID addVariable arr vars3\n    \n    vars3 : COMMA vars2\n        | empty\n    \n    varsadd : vars1\n        | empty\n    \n    tipo : INT \n        | FLOAT\n        | CHAR \n        | STRING\n    \n\tarr : LSQRBRACKET CTEI RSQRBRACKET\n        | empty\n\t\n    parameters : parameters2\n    \t| empty\n    \n\tparameters2 : tipo ID addParameter\n\t\t| tipo ID addParameter parameters3 \n\t\n\tparameters3 : COMMA ID addParameter parameters3\n\t\t| COMMA tipo ID addParameter parameters3\n\t\t| COMMA ID addParameter\n\t\t| COMMA tipo ID addParameter\n\taddParameter : \n\tfuncion : FUNCTION tipo ID addFunction LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto retorno RBRACKET endFunc funcion\n\t\t| FUNCTION VOID ID addFunction LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto RBRACKET endFunc funcion\n        | empty\n\t\n\tretorno : RETURN expresion quadReturn SEMICOLON\n\t\n    estatuto : estatuto2 estatuto\n        | empty\n    \n    estatuto2 : asignacion SEMICOLON\n                | llamada SEMICOLON\n                | lectura SEMICOLON\n                | escritura SEMICOLON\n                | for\n                | if\n                | while\n    \n    asignacion : ID addId arr EQUAL addOperator expresion quadEqual\n    \n    llamada : ID requestCallMemory LPARENTHESIS enviarAgrs RPARENTHESIS callQuad\n    \n\tenviarAgrs : expresion quadArg enviarAgrs2\n\t\t| empty\n\t\n\tenviarAgrs2 : COMMA enviarAgrs\n\t\t| empty\n\t\n    lectura : READ readOperator LPARENTHESIS expresion readQuad RPARENTHESIS\n    \n    escritura : PRINT LPARENTHESIS escritura1 RPARENTHESIS\n    \n    escritura1 : printOperator expresion printQuad escritura2 \n    \n    escritura2 : COMMA escritura1\n        | empty \n    \n    for : FOR forOperator asignacion COMMA TO expresion forQuad LBRACKET estatuto RBRACKET endFor\n    \n    if : IF LPARENTHESIS expresion RPARENTHESIS ifQuad THEN LBRACKET estatuto RBRACKET else endIf\n    \n    else : ELSE elseQuad LBRACKET estatuto RBRACKET\n        | empty\n    \n    while : WHILE whileOperator LPARENTHESIS expresion RPARENTHESIS whileQuad LBRACKET estatuto RBRACKET endWhile\n    \n    expresion : nexp orQuad expresion1\n    \n\texpresion1 : OR addOperator expresion\n\t\t| empty\n\t\n\tnexp : comexp andQuad nexp1\n\t\n\tnexp1 : AND addOperator nexp\n\t\t| empty\n\t\n\tcomexp : sumexp compQuad compex1 compQuad\n\t\n\tcompex1 : GTHAN addOperator sumexp\n\t\t| LTHAN addOperator sumexp\n\t\t| GTHANEQ addOperator sumexp\n\t\t| LTHANEQ addOperator sumexp\n\t\t| DIFFERENT addOperator sumexp\n\t\t| EQUALS addOperator sumexp\n\t\t| empty\n\t\n\tsumexp : mulexp plusQuad sumexp1\n\t\n\tsumexp1 : PLUS addOperator sumexp\n\t\t| MINUS addOperator sumexp\n\t\t| empty\n\t\n\tmulexp : pexp multQuad mulexp1\n\t\n\tmulexp1 : MULTIPLICATION addOperator mulexp\n\t\t| DIVISION addOperator mulexp\n\t\t| empty\n\t\n\tpexp : CTEI addOperandCte\n\t\t| CTEF addOperandCte\n\t\t| CTEC addOperandCte\n\t\t| CTESTRING addOperandCte\n\t\t| llamada\n\t\t| ID addOperandVar\n\t\t| LPARENTHESIS expresion RPARENTHESIS\n\t orQuad :  andQuad :  compQuad : multQuad : plusQuad :  quadEqual :  printOperator :  printQuad :  readOperator :  readQuad :  ifQuad :  elseQuad :  endIf :  whileOperator :  whileQuad :  endWhile :  forOperator :  forQuad :  endFor :  requestCallMemory :  quadArg : addFunction :  endFunc :  callQuad :  quadReturn :  addOperator : addVariable :  addOperandVar :  addOperandCte :  addId : \n    empty : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,10,],[0,-1,]),'ID':([2,15,16,17,18,19,22,23,43,47,60,62,66,72,73,74,78,82,83,84,87,88,89,90,94,95,96,103,104,106,109,122,126,128,153,158,162,165,168,169,170,171,172,173,176,177,180,181,190,194,198,199,201,202,203,204,205,206,207,208,209,210,218,231,232,236,237,238,239,241,242,243,244,246,248,],[3,25,-14,-15,-16,-17,27,28,51,25,75,81,75,-39,-40,-41,-103,99,75,75,-35,-36,-37,-38,-93,108,121,121,121,121,121,121,121,-112,121,121,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,121,-93,121,121,121,121,121,121,121,121,121,121,121,121,75,75,75,-117,-102,-105,-99,-56,-57,-53,-54,75,-55,]),'SEMICOLON':([3,4,24,25,30,37,39,46,48,54,55,68,69,70,71,111,112,113,114,115,116,117,118,119,120,121,133,138,139,140,141,142,143,144,145,146,147,151,154,159,161,163,164,166,167,174,175,178,179,182,185,187,188,192,200,214,219,220,221,222,223,224,225,226,227,228,229,230,],[-2,5,29,-113,-117,-117,-19,-9,-11,-10,-18,87,88,89,90,-87,-88,-89,-91,-90,-115,-115,-115,-115,-84,-114,-49,-117,-117,-117,-117,-117,-80,-81,-82,-83,-85,-111,-110,-86,-58,-60,-61,-63,-89,-71,-72,-75,-76,-79,213,-92,-43,-48,-64,-42,-59,-62,-65,-66,-67,-68,-69,-70,-73,-74,-77,-78,]),'VAR':([5,50,58,59,],[8,8,8,8,]),'FUNCTION':([5,7,9,14,29,34,35,36,127,150,152,184,],[-117,12,-7,-6,-117,-8,-12,-13,-109,-109,12,12,]),'MAIN':([5,7,9,11,13,14,29,34,35,36,127,150,152,184,186,212,],[-117,-117,-7,21,-31,-6,-117,-8,-12,-13,-109,-109,-117,-117,-30,-29,]),'END':([6,20,85,],[10,-3,-4,]),'INT':([8,12,29,31,44,45,62,],[16,16,16,16,16,16,16,]),'FLOAT':([8,12,29,31,44,45,62,],[17,17,17,17,17,17,17,]),'CHAR':([8,12,29,31,44,45,62,],[18,18,18,18,18,18,18,]),'STRING':([8,12,29,31,44,45,62,],[19,19,19,19,19,19,19,]),'LBRACKET':([9,14,29,34,35,36,50,56,58,59,63,64,111,112,113,114,115,116,117,118,119,120,121,138,139,140,141,142,143,144,145,146,147,154,159,161,163,164,166,167,174,175,178,179,182,183,188,196,197,200,211,217,219,220,221,222,223,224,225,226,227,228,229,230,240,245,],[-7,-6,-117,-8,-12,-13,-117,60,-117,-117,83,84,-87,-88,-89,-91,-90,-115,-115,-115,-115,-84,-114,-117,-117,-117,-117,-117,-80,-81,-82,-83,-85,-110,-86,-58,-60,-61,-63,-89,-71,-72,-75,-76,-79,-101,-43,-104,218,-64,231,232,-59,-62,-65,-66,-67,-68,-69,-70,-73,-74,-77,-78,-98,246,]),'VOID':([12,],[23,]),'LPARENTHESIS':([21,26,27,28,32,33,75,76,77,79,80,92,93,94,96,97,103,104,106,109,121,122,126,128,153,158,162,165,168,169,170,171,172,173,176,177,180,181,190,194,198,199,201,202,203,204,205,206,207,208,209,210,],[-5,31,-108,-108,44,45,-106,-95,94,96,-100,103,104,-93,109,122,109,109,109,109,-106,109,109,-112,109,109,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,109,-93,109,109,109,109,109,109,109,109,109,109,109,109,]),'LSQRBRACKET':([25,30,75,91,108,],[-113,38,-116,38,-116,]),'COMMA':([25,30,37,39,51,55,57,81,98,99,107,111,112,113,114,115,116,117,118,119,120,121,124,130,134,138,139,140,141,142,143,144,145,146,147,154,155,157,159,161,163,164,166,167,174,175,178,179,182,187,188,200,214,219,220,221,222,223,224,225,226,227,228,229,230,],[-113,-117,47,-19,-28,-18,62,-28,62,-28,135,-87,-88,-89,-91,-90,-115,-115,-115,-115,-84,-114,62,-107,-94,-117,-117,-117,-117,-117,-80,-81,-82,-83,-85,-110,190,194,-86,-58,-60,-61,-63,-89,-71,-72,-75,-76,-79,-92,-43,-64,-42,-59,-62,-65,-66,-67,-68,-69,-70,-73,-74,-77,-78,]),'RPARENTHESIS':([31,40,41,42,44,45,51,52,53,57,61,81,98,99,103,105,110,111,112,113,114,115,116,117,118,119,120,121,123,124,129,130,131,132,134,136,138,139,140,141,142,143,144,145,146,147,148,149,154,155,156,157,159,161,163,164,166,167,174,175,178,179,182,188,189,190,191,193,195,200,215,216,219,220,221,222,223,224,225,226,227,228,229,230,],[-117,50,-20,-21,-117,-117,-28,58,59,-22,-23,-28,-26,-28,-117,133,137,-87,-88,-89,-91,-90,-115,-115,-115,-115,-84,-114,-24,-27,154,-107,-45,-96,-94,159,-117,-117,-117,-117,-117,-80,-81,-82,-83,-85,183,-25,-110,-117,192,-117,-86,-58,-60,-61,-63,-89,-71,-72,-75,-76,-79,-43,-44,-117,-47,-50,-52,-64,-46,-51,-59,-62,-65,-66,-67,-68,-69,-70,-73,-74,-77,-78,]),'CTEI':([38,94,96,103,104,106,109,122,126,128,153,158,162,165,168,169,170,171,172,173,176,177,180,181,190,194,198,199,201,202,203,204,205,206,207,208,209,210,],[49,-93,116,116,116,116,116,116,116,-112,116,116,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,116,-93,116,116,116,116,116,116,116,116,116,116,116,116,]),'EQUAL':([39,55,75,91,102,108,],[-19,-18,-116,-117,128,-116,]),'RSQRBRACKET':([49,],[55,]),'RBRACKET':([60,65,66,67,72,73,74,84,86,87,88,89,90,101,125,213,218,231,232,233,234,235,236,237,238,239,241,242,243,244,246,247,248,],[-117,85,-117,-34,-39,-40,-41,-117,-33,-35,-36,-37,-38,127,150,-32,-117,-117,-117,236,237,238,-117,-102,-105,-99,-56,-57,-53,-54,-117,248,-55,]),'READ':([60,66,72,73,74,83,84,87,88,89,90,218,231,232,236,237,238,239,241,242,243,244,246,248,],[76,76,-39,-40,-41,76,76,-35,-36,-37,-38,76,76,76,-117,-102,-105,-99,-56,-57,-53,-54,76,-55,]),'PRINT':([60,66,72,73,74,83,84,87,88,89,90,218,231,232,236,237,238,239,241,242,243,244,246,248,],[77,77,-39,-40,-41,77,77,-35,-36,-37,-38,77,77,77,-117,-102,-105,-99,-56,-57,-53,-54,77,-55,]),'FOR':([60,66,72,73,74,83,84,87,88,89,90,218,231,232,236,237,238,239,241,242,243,244,246,248,],[78,78,-39,-40,-41,78,78,-35,-36,-37,-38,78,78,78,-117,-102,-105,-99,-56,-57,-53,-54,78,-55,]),'IF':([60,66,72,73,74,83,84,87,88,89,90,218,231,232,236,237,238,239,241,242,243,244,246,248,],[79,79,-39,-40,-41,79,79,-35,-36,-37,-38,79,79,79,-117,-102,-105,-99,-56,-57,-53,-54,79,-55,]),'WHILE':([60,66,72,73,74,83,84,87,88,89,90,218,231,232,236,237,238,239,241,242,243,244,246,248,],[80,80,-39,-40,-41,80,80,-35,-36,-37,-38,80,80,80,-117,-102,-105,-99,-56,-57,-53,-54,80,-55,]),'RETURN':([66,67,72,73,74,83,86,87,88,89,90,100,236,237,238,239,241,242,243,244,248,],[-117,-34,-39,-40,-41,-117,-33,-35,-36,-37,-38,126,-117,-102,-105,-99,-56,-57,-53,-54,-55,]),'CTEF':([94,96,103,104,106,109,122,126,128,153,158,162,165,168,169,170,171,172,173,176,177,180,181,190,194,198,199,201,202,203,204,205,206,207,208,209,210,],[-93,117,117,117,117,117,117,117,-112,117,117,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,117,-93,117,117,117,117,117,117,117,117,117,117,117,117,]),'CTEC':([94,96,103,104,106,109,122,126,128,153,158,162,165,168,169,170,171,172,173,176,177,180,181,190,194,198,199,201,202,203,204,205,206,207,208,209,210,],[-93,118,118,118,118,118,118,118,-112,118,118,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,118,-93,118,118,118,118,118,118,118,118,118,118,118,118,]),'CTESTRING':([94,96,103,104,106,109,122,126,128,153,158,162,165,168,169,170,171,172,173,176,177,180,181,190,194,198,199,201,202,203,204,205,206,207,208,209,210,],[-93,119,119,119,119,119,119,119,-112,119,119,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,119,-93,119,119,119,119,119,119,119,119,119,119,119,119,]),'OR':([111,112,113,114,115,116,117,118,119,120,121,138,139,140,141,142,143,144,145,146,147,154,159,164,166,167,174,175,178,179,182,188,200,220,221,222,223,224,225,226,227,228,229,230,],[-87,-88,-89,-91,-90,-115,-115,-115,-115,-84,-114,162,-117,-117,-117,-117,-80,-81,-82,-83,-85,-110,-86,-61,-63,-89,-71,-72,-75,-76,-79,-43,-64,-62,-65,-66,-67,-68,-69,-70,-73,-74,-77,-78,]),'AND':([112,113,114,115,116,117,118,119,120,121,139,140,141,142,143,144,145,146,147,154,159,167,174,175,178,179,182,188,200,221,222,223,224,225,226,227,228,229,230,],[-88,-89,-91,-90,-115,-115,-115,-115,-84,-114,165,-117,-117,-117,-80,-81,-82,-83,-85,-110,-86,-89,-71,-72,-75,-76,-79,-43,-64,-65,-66,-67,-68,-69,-70,-73,-74,-77,-78,]),'GTHAN':([113,114,115,116,117,118,119,120,121,140,141,142,143,144,145,146,147,154,159,175,178,179,182,188,227,228,229,230,],[-89,-91,-90,-115,-115,-115,-115,-84,-114,168,-117,-117,-80,-81,-82,-83,-85,-110,-86,-72,-75,-76,-79,-43,-73,-74,-77,-78,]),'LTHAN':([113,114,115,116,117,118,119,120,121,140,141,142,143,144,145,146,147,154,159,175,178,179,182,188,227,228,229,230,],[-89,-91,-90,-115,-115,-115,-115,-84,-114,169,-117,-117,-80,-81,-82,-83,-85,-110,-86,-72,-75,-76,-79,-43,-73,-74,-77,-78,]),'GTHANEQ':([113,114,115,116,117,118,119,120,121,140,141,142,143,144,145,146,147,154,159,175,178,179,182,188,227,228,229,230,],[-89,-91,-90,-115,-115,-115,-115,-84,-114,170,-117,-117,-80,-81,-82,-83,-85,-110,-86,-72,-75,-76,-79,-43,-73,-74,-77,-78,]),'LTHANEQ':([113,114,115,116,117,118,119,120,121,140,141,142,143,144,145,146,147,154,159,175,178,179,182,188,227,228,229,230,],[-89,-91,-90,-115,-115,-115,-115,-84,-114,171,-117,-117,-80,-81,-82,-83,-85,-110,-86,-72,-75,-76,-79,-43,-73,-74,-77,-78,]),'DIFFERENT':([113,114,115,116,117,118,119,120,121,140,141,142,143,144,145,146,147,154,159,175,178,179,182,188,227,228,229,230,],[-89,-91,-90,-115,-115,-115,-115,-84,-114,172,-117,-117,-80,-81,-82,-83,-85,-110,-86,-72,-75,-76,-79,-43,-73,-74,-77,-78,]),'EQUALS':([113,114,115,116,117,118,119,120,121,140,141,142,143,144,145,146,147,154,159,175,178,179,182,188,227,228,229,230,],[-89,-91,-90,-115,-115,-115,-115,-84,-114,173,-117,-117,-80,-81,-82,-83,-85,-110,-86,-72,-75,-76,-79,-43,-73,-74,-77,-78,]),'PLUS':([114,115,116,117,118,119,120,121,141,142,143,144,145,146,147,154,159,179,182,188,229,230,],[-91,-90,-115,-115,-115,-115,-84,-114,176,-117,-80,-81,-82,-83,-85,-110,-86,-76,-79,-43,-77,-78,]),'MINUS':([114,115,116,117,118,119,120,121,141,142,143,144,145,146,147,154,159,179,182,188,229,230,],[-91,-90,-115,-115,-115,-115,-84,-114,177,-117,-80,-81,-82,-83,-85,-110,-86,-76,-79,-43,-77,-78,]),'MULTIPLICATION':([115,116,117,118,119,120,121,142,143,144,145,146,147,154,159,188,],[-90,-115,-115,-115,-115,-84,-114,180,-80,-81,-82,-83,-85,-110,-86,-43,]),'DIVISION':([115,116,117,118,119,120,121,142,143,144,145,146,147,154,159,188,],[-90,-115,-115,-115,-115,-84,-114,181,-80,-81,-82,-83,-85,-110,-86,-43,]),'TO':([135,],[158,]),'THEN':([137,160,],[-97,197,]),'ELSE':([236,],[240,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'addProgram':([3,],[4,]),'programa1':([5,],[6,]),'vars':([5,50,58,59,],[7,56,63,64,]),'empty':([5,7,29,30,31,37,44,45,50,58,59,60,66,83,84,91,103,138,139,140,141,142,152,155,157,184,190,218,231,232,236,246,],[9,13,36,39,42,48,42,42,9,9,9,67,67,67,67,39,131,163,166,174,178,182,13,191,195,13,131,67,67,67,241,67,]),'funcion':([7,152,184,],[11,186,212,]),'vars1':([8,29,],[14,35,]),'tipo':([8,12,29,31,44,45,62,],[15,22,15,43,43,43,82,]),'principal':([11,],[20,]),'vars2':([15,47,],[24,54,]),'addMain':([21,],[26,]),'addVariable':([25,],[30,]),'addFunction':([27,28,],[32,33,]),'varsadd':([29,],[34,]),'arr':([30,91,],[37,102,]),'parameters':([31,44,45,],[40,52,53,]),'parameters2':([31,44,45,],[41,41,41,]),'vars3':([37,],[46,]),'addParameter':([51,81,99,],[57,98,124,]),'parameters3':([57,98,124,],[61,123,149,]),'estatuto':([60,66,83,84,218,231,232,246,],[65,86,100,101,233,234,235,247,]),'estatuto2':([60,66,83,84,218,231,232,246,],[66,66,66,66,66,66,66,66,]),'asignacion':([60,66,83,84,95,218,231,232,246,],[68,68,68,68,107,68,68,68,68,]),'llamada':([60,66,83,84,96,103,104,106,109,122,126,153,158,190,198,199,201,202,203,204,205,206,207,208,209,210,218,231,232,246,],[69,69,69,69,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,69,69,69,69,]),'lectura':([60,66,83,84,218,231,232,246,],[70,70,70,70,70,70,70,70,]),'escritura':([60,66,83,84,218,231,232,246,],[71,71,71,71,71,71,71,71,]),'for':([60,66,83,84,218,231,232,246,],[72,72,72,72,72,72,72,72,]),'if':([60,66,83,84,218,231,232,246,],[73,73,73,73,73,73,73,73,]),'while':([60,66,83,84,218,231,232,246,],[74,74,74,74,74,74,74,74,]),'addId':([75,108,],[91,91,]),'requestCallMemory':([75,121,],[92,92,]),'readOperator':([76,],[93,]),'forOperator':([78,],[95,]),'whileOperator':([80,],[97,]),'escritura1':([94,194,],[105,216,]),'printOperator':([94,194,],[106,106,]),'expresion':([96,103,104,106,109,122,126,153,158,190,198,],[110,130,132,134,136,148,151,187,196,130,219,]),'nexp':([96,103,104,106,109,122,126,153,158,190,198,199,],[111,111,111,111,111,111,111,111,111,111,111,220,]),'comexp':([96,103,104,106,109,122,126,153,158,190,198,199,],[112,112,112,112,112,112,112,112,112,112,112,112,]),'sumexp':([96,103,104,106,109,122,126,153,158,190,198,199,201,202,203,204,205,206,207,208,],[113,113,113,113,113,113,113,113,113,113,113,113,221,222,223,224,225,226,227,228,]),'mulexp':([96,103,104,106,109,122,126,153,158,190,198,199,201,202,203,204,205,206,207,208,209,210,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,229,230,]),'pexp':([96,103,104,106,109,122,126,153,158,190,198,199,201,202,203,204,205,206,207,208,209,210,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'retorno':([100,],[125,]),'enviarAgrs':([103,190,],[129,215,]),'orQuad':([111,],[138,]),'andQuad':([112,],[139,]),'compQuad':([113,167,],[140,200,]),'plusQuad':([114,],[141,]),'multQuad':([115,],[142,]),'addOperandCte':([116,117,118,119,],[143,144,145,146,]),'addOperandVar':([121,],[147,]),'endFunc':([127,150,],[152,184,]),'addOperator':([128,162,165,168,169,170,171,172,173,176,177,180,181,],[153,198,199,201,202,203,204,205,206,207,208,209,210,]),'quadArg':([130,],[155,]),'readQuad':([132,],[156,]),'printQuad':([134,],[157,]),'ifQuad':([137,],[160,]),'expresion1':([138,],[161,]),'nexp1':([139,],[164,]),'compex1':([140,],[167,]),'sumexp1':([141,],[175,]),'mulexp1':([142,],[179,]),'quadReturn':([151,],[185,]),'callQuad':([154,],[188,]),'enviarAgrs2':([155,],[189,]),'escritura2':([157,],[193,]),'whileQuad':([183,],[211,]),'quadEqual':([187,],[214,]),'forQuad':([196,],[217,]),'else':([236,],[239,]),'endWhile':([237,],[242,]),'endFor':([238,],[243,]),'endIf':([239,],[244,]),'elseQuad':([240,],[245,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID addProgram SEMICOLON programa1 END','programa',6,'p_programa','LexSint.py',181),
  ('addProgram -> <empty>','addProgram',0,'p_addProgram','LexSint.py',185),
  ('programa1 -> vars funcion principal','programa1',3,'p_programa1','LexSint.py',197),
  ('principal -> MAIN addMain LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto RBRACKET','principal',9,'p_principal','LexSint.py',201),
  ('addMain -> <empty>','addMain',0,'p_addMain','LexSint.py',204),
  ('vars -> VAR vars1','vars',2,'p_vars','LexSint.py',218),
  ('vars -> empty','vars',1,'p_vars','LexSint.py',219),
  ('vars1 -> tipo vars2 SEMICOLON varsadd','vars1',4,'p_vars1','LexSint.py',223),
  ('vars2 -> ID addVariable arr vars3','vars2',4,'p_vars2','LexSint.py',227),
  ('vars3 -> COMMA vars2','vars3',2,'p_vars3','LexSint.py',231),
  ('vars3 -> empty','vars3',1,'p_vars3','LexSint.py',232),
  ('varsadd -> vars1','varsadd',1,'p_varsadd','LexSint.py',236),
  ('varsadd -> empty','varsadd',1,'p_varsadd','LexSint.py',237),
  ('tipo -> INT','tipo',1,'p_tipo','LexSint.py',241),
  ('tipo -> FLOAT','tipo',1,'p_tipo','LexSint.py',242),
  ('tipo -> CHAR','tipo',1,'p_tipo','LexSint.py',243),
  ('tipo -> STRING','tipo',1,'p_tipo','LexSint.py',244),
  ('arr -> LSQRBRACKET CTEI RSQRBRACKET','arr',3,'p_arr','LexSint.py',253),
  ('arr -> empty','arr',1,'p_arr','LexSint.py',254),
  ('parameters -> parameters2','parameters',1,'p_parameters','LexSint.py',259),
  ('parameters -> empty','parameters',1,'p_parameters','LexSint.py',260),
  ('parameters2 -> tipo ID addParameter','parameters2',3,'p_parameters2','LexSint.py',264),
  ('parameters2 -> tipo ID addParameter parameters3','parameters2',4,'p_parameters2','LexSint.py',265),
  ('parameters3 -> COMMA ID addParameter parameters3','parameters3',4,'p_parameters3','LexSint.py',269),
  ('parameters3 -> COMMA tipo ID addParameter parameters3','parameters3',5,'p_parameters3','LexSint.py',270),
  ('parameters3 -> COMMA ID addParameter','parameters3',3,'p_parameters3','LexSint.py',271),
  ('parameters3 -> COMMA tipo ID addParameter','parameters3',4,'p_parameters3','LexSint.py',272),
  ('addParameter -> <empty>','addParameter',0,'p_addParameter','LexSint.py',276),
  ('funcion -> FUNCTION tipo ID addFunction LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto retorno RBRACKET endFunc funcion','funcion',14,'p_funcion','LexSint.py',287),
  ('funcion -> FUNCTION VOID ID addFunction LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto RBRACKET endFunc funcion','funcion',13,'p_funcion','LexSint.py',288),
  ('funcion -> empty','funcion',1,'p_funcion','LexSint.py',289),
  ('retorno -> RETURN expresion quadReturn SEMICOLON','retorno',4,'p_retorno','LexSint.py',293),
  ('estatuto -> estatuto2 estatuto','estatuto',2,'p_estatuto','LexSint.py',298),
  ('estatuto -> empty','estatuto',1,'p_estatuto','LexSint.py',299),
  ('estatuto2 -> asignacion SEMICOLON','estatuto2',2,'p_estatuto2','LexSint.py',303),
  ('estatuto2 -> llamada SEMICOLON','estatuto2',2,'p_estatuto2','LexSint.py',304),
  ('estatuto2 -> lectura SEMICOLON','estatuto2',2,'p_estatuto2','LexSint.py',305),
  ('estatuto2 -> escritura SEMICOLON','estatuto2',2,'p_estatuto2','LexSint.py',306),
  ('estatuto2 -> for','estatuto2',1,'p_estatuto2','LexSint.py',307),
  ('estatuto2 -> if','estatuto2',1,'p_estatuto2','LexSint.py',308),
  ('estatuto2 -> while','estatuto2',1,'p_estatuto2','LexSint.py',309),
  ('asignacion -> ID addId arr EQUAL addOperator expresion quadEqual','asignacion',7,'p_asignacion','LexSint.py',313),
  ('llamada -> ID requestCallMemory LPARENTHESIS enviarAgrs RPARENTHESIS callQuad','llamada',6,'p_llamada','LexSint.py',317),
  ('enviarAgrs -> expresion quadArg enviarAgrs2','enviarAgrs',3,'p_enviarAgrs','LexSint.py',321),
  ('enviarAgrs -> empty','enviarAgrs',1,'p_enviarAgrs','LexSint.py',322),
  ('enviarAgrs2 -> COMMA enviarAgrs','enviarAgrs2',2,'p_enviarAgrs2','LexSint.py',326),
  ('enviarAgrs2 -> empty','enviarAgrs2',1,'p_enviarAgrs2','LexSint.py',327),
  ('lectura -> READ readOperator LPARENTHESIS expresion readQuad RPARENTHESIS','lectura',6,'p_lectura','LexSint.py',331),
  ('escritura -> PRINT LPARENTHESIS escritura1 RPARENTHESIS','escritura',4,'p_escritura','LexSint.py',335),
  ('escritura1 -> printOperator expresion printQuad escritura2','escritura1',4,'p_escritura1','LexSint.py',339),
  ('escritura2 -> COMMA escritura1','escritura2',2,'p_escritura2','LexSint.py',343),
  ('escritura2 -> empty','escritura2',1,'p_escritura2','LexSint.py',344),
  ('for -> FOR forOperator asignacion COMMA TO expresion forQuad LBRACKET estatuto RBRACKET endFor','for',11,'p_for','LexSint.py',348),
  ('if -> IF LPARENTHESIS expresion RPARENTHESIS ifQuad THEN LBRACKET estatuto RBRACKET else endIf','if',11,'p_if','LexSint.py',352),
  ('else -> ELSE elseQuad LBRACKET estatuto RBRACKET','else',5,'p_else','LexSint.py',356),
  ('else -> empty','else',1,'p_else','LexSint.py',357),
  ('while -> WHILE whileOperator LPARENTHESIS expresion RPARENTHESIS whileQuad LBRACKET estatuto RBRACKET endWhile','while',10,'p_while','LexSint.py',361),
  ('expresion -> nexp orQuad expresion1','expresion',3,'p_expresion','LexSint.py',366),
  ('expresion1 -> OR addOperator expresion','expresion1',3,'p_expresion1','LexSint.py',370),
  ('expresion1 -> empty','expresion1',1,'p_expresion1','LexSint.py',371),
  ('nexp -> comexp andQuad nexp1','nexp',3,'p_nexp','LexSint.py',375),
  ('nexp1 -> AND addOperator nexp','nexp1',3,'p_nexp1','LexSint.py',379),
  ('nexp1 -> empty','nexp1',1,'p_nexp1','LexSint.py',380),
  ('comexp -> sumexp compQuad compex1 compQuad','comexp',4,'p_comexp','LexSint.py',384),
  ('compex1 -> GTHAN addOperator sumexp','compex1',3,'p_compex1','LexSint.py',388),
  ('compex1 -> LTHAN addOperator sumexp','compex1',3,'p_compex1','LexSint.py',389),
  ('compex1 -> GTHANEQ addOperator sumexp','compex1',3,'p_compex1','LexSint.py',390),
  ('compex1 -> LTHANEQ addOperator sumexp','compex1',3,'p_compex1','LexSint.py',391),
  ('compex1 -> DIFFERENT addOperator sumexp','compex1',3,'p_compex1','LexSint.py',392),
  ('compex1 -> EQUALS addOperator sumexp','compex1',3,'p_compex1','LexSint.py',393),
  ('compex1 -> empty','compex1',1,'p_compex1','LexSint.py',394),
  ('sumexp -> mulexp plusQuad sumexp1','sumexp',3,'p_sumexp','LexSint.py',398),
  ('sumexp1 -> PLUS addOperator sumexp','sumexp1',3,'p_sumexp1','LexSint.py',402),
  ('sumexp1 -> MINUS addOperator sumexp','sumexp1',3,'p_sumexp1','LexSint.py',403),
  ('sumexp1 -> empty','sumexp1',1,'p_sumexp1','LexSint.py',404),
  ('mulexp -> pexp multQuad mulexp1','mulexp',3,'p_mulexp','LexSint.py',408),
  ('mulexp1 -> MULTIPLICATION addOperator mulexp','mulexp1',3,'p_mulexp1','LexSint.py',412),
  ('mulexp1 -> DIVISION addOperator mulexp','mulexp1',3,'p_mulexp1','LexSint.py',413),
  ('mulexp1 -> empty','mulexp1',1,'p_mulexp1','LexSint.py',414),
  ('pexp -> CTEI addOperandCte','pexp',2,'p_pexp','LexSint.py',418),
  ('pexp -> CTEF addOperandCte','pexp',2,'p_pexp','LexSint.py',419),
  ('pexp -> CTEC addOperandCte','pexp',2,'p_pexp','LexSint.py',420),
  ('pexp -> CTESTRING addOperandCte','pexp',2,'p_pexp','LexSint.py',421),
  ('pexp -> llamada','pexp',1,'p_pexp','LexSint.py',422),
  ('pexp -> ID addOperandVar','pexp',2,'p_pexp','LexSint.py',423),
  ('pexp -> LPARENTHESIS expresion RPARENTHESIS','pexp',3,'p_pexp','LexSint.py',424),
  ('orQuad -> <empty>','orQuad',0,'p_orQuad','LexSint.py',435),
  ('andQuad -> <empty>','andQuad',0,'p_andQuad','LexSint.py',441),
  ('compQuad -> <empty>','compQuad',0,'p_compQuad','LexSint.py',449),
  ('multQuad -> <empty>','multQuad',0,'p_multQuad','LexSint.py',457),
  ('plusQuad -> <empty>','plusQuad',0,'p_plusQuad','LexSint.py',465),
  ('quadEqual -> <empty>','quadEqual',0,'p_quadEqual','LexSint.py',473),
  ('printOperator -> <empty>','printOperator',0,'p_printOperator','LexSint.py',501),
  ('printQuad -> <empty>','printQuad',0,'p_printQuad','LexSint.py',505),
  ('readOperator -> <empty>','readOperator',0,'p_readOperator','LexSint.py',521),
  ('readQuad -> <empty>','readQuad',0,'p_readQuad','LexSint.py',525),
  ('ifQuad -> <empty>','ifQuad',0,'p_ifQuad','LexSint.py',545),
  ('elseQuad -> <empty>','elseQuad',0,'p_elseQuad','LexSint.py',563),
  ('endIf -> <empty>','endIf',0,'p_endIf','LexSint.py',575),
  ('whileOperator -> <empty>','whileOperator',0,'p_whileOperator','LexSint.py',582),
  ('whileQuad -> <empty>','whileQuad',0,'p_whileQuad','LexSint.py',588),
  ('endWhile -> <empty>','endWhile',0,'p_endWhile','LexSint.py',607),
  ('forOperator -> <empty>','forOperator',0,'p_forOperator','LexSint.py',619),
  ('forQuad -> <empty>','forQuad',0,'p_forQuad','LexSint.py',625),
  ('endFor -> <empty>','endFor',0,'p_endFor','LexSint.py',639),
  ('requestCallMemory -> <empty>','requestCallMemory',0,'p_requestCallMemory','LexSint.py',650),
  ('quadArg -> <empty>','quadArg',0,'p_quadArg','LexSint.py',658),
  ('addFunction -> <empty>','addFunction',0,'p_addFunction','LexSint.py',669),
  ('endFunc -> <empty>','endFunc',0,'p_endFunc','LexSint.py',682),
  ('callQuad -> <empty>','callQuad',0,'p_callQuad','LexSint.py',690),
  ('quadReturn -> <empty>','quadReturn',0,'p_quadReturn','LexSint.py',700),
  ('addOperator -> <empty>','addOperator',0,'p_addOperator','LexSint.py',752),
  ('addVariable -> <empty>','addVariable',0,'p_addVariable','LexSint.py',757),
  ('addOperandVar -> <empty>','addOperandVar',0,'p_addOperandVar','LexSint.py',766),
  ('addOperandCte -> <empty>','addOperandCte',0,'p_addOperandCte','LexSint.py',776),
  ('addId -> <empty>','addId',0,'p_addId','LexSint.py',796),
  ('empty -> <empty>','empty',0,'p_empty','LexSint.py',817),
]
