
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLICATIONDIVISIONrightEQUALleftANDORAND CHAR COMMA CTEC CTEF CTEI CTESTRING DIFFERENT DIVISION ELSE END EQUAL EQUALS FLOAT FOR FROM FUNCTION GTHAN GTHANEQ ID IF INT LBRACKET LPARENTHESIS LSQRBRACKET LTHAN LTHANEQ MAIN MINUS MULTIPLICATION OR PLUS PRINT PROGRAM RBRACKET READ RETURN RPARENTHESIS RSQRBRACKET SEMICOLON STRING THEN TO VAR VOID WHILE\n    programa : PROGRAM ID addProgram SEMICOLON programa1 END\n     addProgram : \n    programa1 : vars funcion principal \n    \n    principal : MAIN addMain LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto RBRACKET\n     addMain : \n    vars : VAR vars1\n        | empty\n    \n    vars1 : tipo vars2 SEMICOLON varsadd\n    \n    vars2 : ID addVariable arr vars3\n    \n    vars3 : COMMA vars2\n        | empty\n    \n    varsadd : vars1\n        | empty\n    \n    tipo : INT \n        | FLOAT\n        | CHAR \n        | STRING\n    \n\tarr : LSQRBRACKET CTEI RSQRBRACKET\n        | empty\n\t\n    parameters : parameters2\n    \t| empty\n    \n\tparameters2 : tipo ID addVariable\n\t\t| tipo ID addVariable parameters3 \n\t\n\tparameters3 : COMMA ID addVariable parameters3\n\t\t| COMMA tipo ID addVariable parameters3\n\t\t| COMMA ID addVariable\n\t\t| COMMA tipo ID addVariable\n\t\n\tfuncion : FUNCTION tipo ID addFunction LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto retorno RBRACKET funcion\n\t\t| FUNCTION VOID ID addFunction LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto RBRACKET funcion\n        | empty\n\taddFunction : \n\tretorno : RETURN ID SEMICOLON\n\t\n    estatuto : estatuto2 estatuto\n        | empty\n    \n    estatuto2 : asignacion SEMICOLON\n                | llamada SEMICOLON\n                | lectura SEMICOLON\n                | escritura SEMICOLON\n                | for\n                | if\n                | while\n    \n    asignacion : ID addId arr EQUAL addOperator expresion quadEqual\n    \n    llamada : ID LPARENTHESIS expresion RPARENTHESIS \n    \n    lectura : READ LPARENTHESIS vars2 RPARENTHESIS\n    \n    escritura : PRINT LPARENTHESIS escritura1 RPARENTHESIS\n    \n    escritura1 : printOperator expresion escritura2 \n    \n    escritura2 : COMMA escritura1\n        | empty \n     printOperator : \n    for : FOR LPARENTHESIS FROM asignacion COMMA TO expresion RPARENTHESIS LBRACKET estatuto RBRACKET\n    \n    if : IF LPARENTHESIS expresion RPARENTHESIS THEN LBRACKET estatuto RBRACKET else \n    \n    else : ELSE LBRACKET estatuto RBRACKET\n        | empty\n    \n    while : WHILE LPARENTHESIS expresion RPARENTHESIS LBRACKET estatuto RBRACKET\n    \n    expresion : nexp genQuad expresion1\n    \n\texpresion1 : OR addOperator expresion\n\t\t| empty\n\t\n\tnexp : comexp genQuad nexp1\n\t\n\tnexp1 : AND addOperator nexp\n\t\t| empty\n\t\n\tcomexp : sumexp genQuad compex1\n\t\n\tcompex1 : GTHAN addOperator sumexp\n\t\t| LTHAN addOperator sumexp\n\t\t| GTHANEQ addOperator sumexp\n\t\t| LTHANEQ addOperator sumexp\n\t\t| DIFFERENT addOperator sumexp\n\t\t| EQUALS addOperator sumexp\n\t\t| empty\n\t\n\tsumexp : mulexp genQuad sumexp1\n\t\n\tsumexp1 : PLUS addOperator sumexp\n\t\t| MINUS addOperator sumexp\n\t\t| empty\n\t\n\tmulexp : pexp genQuad mulexp1\n\t\n\tmulexp1 : MULTIPLICATION addOperator mulexp\n\t\t| DIVISION addOperator mulexp\n\t\t| empty\n\t\n\tpexp : CTEI addOperandCte\n\t\t| CTEF addOperandCte\n\t\t| CTEC addOperandCte\n\t\t| CTESTRING addOperandCte\n\t\t| llamada\n\t\t| ID addOperandVar\n\t\t| LPARENTHESIS expresion RPARENTHESIS\n\taddVariable :  quadEqual : genQuad :  addOperator :  addOperandVar :  addOperandCte :  addId : \n    empty : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,10,],[0,-1,]),'ID':([2,15,16,17,18,19,22,23,43,47,60,62,66,72,73,74,82,83,84,87,88,89,90,92,93,94,96,97,104,118,119,125,127,151,154,157,160,161,162,163,164,165,168,169,172,173,176,180,184,185,186,187,188,189,190,191,192,193,194,195,197,198,215,217,218,219,221,223,224,226,],[3,25,-14,-15,-16,-17,27,28,51,25,75,81,75,-39,-40,-41,99,75,75,-35,-36,-37,-38,103,25,-49,103,103,103,103,144,149,-87,103,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-49,75,103,103,103,103,103,103,103,103,103,103,103,103,103,75,-54,-91,75,-51,-53,75,-50,-52,]),'SEMICOLON':([3,4,24,25,30,37,39,46,48,54,55,68,69,70,71,103,106,107,108,109,110,111,112,113,114,115,128,130,131,132,133,134,135,136,137,138,139,140,141,149,152,153,155,156,158,159,166,167,170,171,174,183,200,201,202,203,204,205,206,207,208,209,210,211,212,],[-2,5,29,-84,-91,-91,-19,-9,-11,-10,-18,87,88,89,90,-88,-86,-86,-86,-86,-86,-89,-89,-89,-89,-81,-82,-43,-91,-91,-91,-91,-91,-77,-78,-79,-80,-44,-45,182,-83,-55,-57,-58,-60,-61,-68,-69,-72,-73,-76,-85,-42,-56,-59,-62,-63,-64,-65,-66,-67,-70,-71,-74,-75,]),'VAR':([5,50,58,59,],[8,8,8,8,]),'FUNCTION':([5,7,9,14,29,34,35,36,126,148,],[-91,12,-7,-6,-91,-8,-12,-13,12,12,]),'MAIN':([5,7,9,11,13,14,29,34,35,36,126,148,150,181,],[-91,-91,-7,21,-30,-6,-91,-8,-12,-13,-91,-91,-29,-28,]),'END':([6,20,85,],[10,-3,-4,]),'INT':([8,12,29,31,44,45,62,],[16,16,16,16,16,16,16,]),'FLOAT':([8,12,29,31,44,45,62,],[17,17,17,17,17,17,17,]),'CHAR':([8,12,29,31,44,45,62,],[18,18,18,18,18,18,18,]),'STRING':([8,12,29,31,44,45,62,],[19,19,19,19,19,19,19,]),'LBRACKET':([9,14,29,34,35,36,50,56,58,59,63,64,146,179,216,220,],[-7,-6,-91,-8,-12,-13,-91,60,-91,-91,83,84,180,198,218,223,]),'VOID':([12,],[23,]),'LPARENTHESIS':([21,26,27,28,32,33,75,76,77,78,79,80,92,94,96,97,103,104,118,127,151,154,157,160,161,162,163,164,165,168,169,172,173,176,184,185,186,187,188,189,190,191,192,193,194,195,197,],[-5,31,-31,-31,44,45,92,93,94,95,96,97,104,-49,104,104,92,104,104,-87,104,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-49,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'LSQRBRACKET':([25,30,75,91,144,],[-84,38,-90,38,-90,]),'COMMA':([25,30,37,39,51,55,57,81,98,99,103,106,107,108,109,110,111,112,113,114,115,123,128,130,131,132,133,134,135,136,137,138,139,142,143,152,153,155,156,158,159,166,167,170,171,174,183,200,201,202,203,204,205,206,207,208,209,210,211,212,],[-84,-91,47,-19,-84,-18,62,-84,62,-84,-88,-86,-86,-86,-86,-86,-89,-89,-89,-89,-81,62,-82,-43,-91,-91,-91,-91,-91,-77,-78,-79,-80,176,178,-83,-55,-57,-58,-60,-61,-68,-69,-72,-73,-76,-85,-42,-56,-59,-62,-63,-64,-65,-66,-67,-70,-71,-74,-75,]),'RPARENTHESIS':([25,30,31,37,39,40,41,42,44,45,46,48,51,52,53,54,55,57,61,81,98,99,103,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,128,129,130,131,132,133,134,135,136,137,138,139,142,147,152,153,155,156,158,159,166,167,170,171,174,175,177,196,201,202,203,204,205,206,207,208,209,210,211,212,213,],[-84,-91,-91,-91,-19,50,-20,-21,-91,-91,-9,-11,-84,58,59,-10,-18,-22,-23,-84,-26,-84,-88,130,-86,-86,-86,-86,-86,-89,-89,-89,-89,-81,140,141,145,146,-24,-27,-82,152,-43,-91,-91,-91,-91,-91,-77,-78,-79,-80,-91,-25,-83,-55,-57,-58,-60,-61,-68,-69,-72,-73,-76,-46,-48,-47,-56,-59,-62,-63,-64,-65,-66,-67,-70,-71,-74,-75,216,]),'CTEI':([38,92,94,96,97,104,118,127,151,154,157,160,161,162,163,164,165,168,169,172,173,176,184,185,186,187,188,189,190,191,192,193,194,195,197,],[49,111,-49,111,111,111,111,-87,111,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-49,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'EQUAL':([39,55,75,91,102,144,],[-19,-18,-90,-91,127,-90,]),'RSQRBRACKET':([49,],[55,]),'RBRACKET':([60,65,66,67,72,73,74,84,86,87,88,89,90,101,124,180,182,198,199,214,215,217,218,219,221,222,223,224,225,226,],[-91,85,-91,-34,-39,-40,-41,-91,-33,-35,-36,-37,-38,126,148,-91,-32,-91,215,217,-54,-91,-91,-51,-53,224,-91,-50,226,-52,]),'READ':([60,66,72,73,74,83,84,87,88,89,90,180,198,215,217,218,219,221,223,224,226,],[76,76,-39,-40,-41,76,76,-35,-36,-37,-38,76,76,-54,-91,76,-51,-53,76,-50,-52,]),'PRINT':([60,66,72,73,74,83,84,87,88,89,90,180,198,215,217,218,219,221,223,224,226,],[77,77,-39,-40,-41,77,77,-35,-36,-37,-38,77,77,-54,-91,77,-51,-53,77,-50,-52,]),'FOR':([60,66,72,73,74,83,84,87,88,89,90,180,198,215,217,218,219,221,223,224,226,],[78,78,-39,-40,-41,78,78,-35,-36,-37,-38,78,78,-54,-91,78,-51,-53,78,-50,-52,]),'IF':([60,66,72,73,74,83,84,87,88,89,90,180,198,215,217,218,219,221,223,224,226,],[79,79,-39,-40,-41,79,79,-35,-36,-37,-38,79,79,-54,-91,79,-51,-53,79,-50,-52,]),'WHILE':([60,66,72,73,74,83,84,87,88,89,90,180,198,215,217,218,219,221,223,224,226,],[80,80,-39,-40,-41,80,80,-35,-36,-37,-38,80,80,-54,-91,80,-51,-53,80,-50,-52,]),'RETURN':([66,67,72,73,74,83,86,87,88,89,90,100,215,217,219,221,224,226,],[-91,-34,-39,-40,-41,-91,-33,-35,-36,-37,-38,125,-54,-91,-51,-53,-50,-52,]),'CTEF':([92,94,96,97,104,118,127,151,154,157,160,161,162,163,164,165,168,169,172,173,176,184,185,186,187,188,189,190,191,192,193,194,195,197,],[112,-49,112,112,112,112,-87,112,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-49,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'CTEC':([92,94,96,97,104,118,127,151,154,157,160,161,162,163,164,165,168,169,172,173,176,184,185,186,187,188,189,190,191,192,193,194,195,197,],[113,-49,113,113,113,113,-87,113,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-49,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'CTESTRING':([92,94,96,97,104,118,127,151,154,157,160,161,162,163,164,165,168,169,172,173,176,184,185,186,187,188,189,190,191,192,193,194,195,197,],[114,-49,114,114,114,114,-87,114,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-87,-49,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'FROM':([95,],[119,]),'MULTIPLICATION':([103,110,111,112,113,114,115,128,130,135,136,137,138,139,152,],[-88,-86,-89,-89,-89,-89,-81,-82,-43,172,-77,-78,-79,-80,-83,]),'DIVISION':([103,110,111,112,113,114,115,128,130,135,136,137,138,139,152,],[-88,-86,-89,-89,-89,-89,-81,-82,-43,173,-77,-78,-79,-80,-83,]),'PLUS':([103,109,110,111,112,113,114,115,128,130,134,135,136,137,138,139,152,171,174,211,212,],[-88,-86,-86,-89,-89,-89,-89,-81,-82,-43,168,-91,-77,-78,-79,-80,-83,-73,-76,-74,-75,]),'MINUS':([103,109,110,111,112,113,114,115,128,130,134,135,136,137,138,139,152,171,174,211,212,],[-88,-86,-86,-89,-89,-89,-89,-81,-82,-43,169,-91,-77,-78,-79,-80,-83,-73,-76,-74,-75,]),'GTHAN':([103,108,109,110,111,112,113,114,115,128,130,133,134,135,136,137,138,139,152,167,170,171,174,209,210,211,212,],[-88,-86,-86,-86,-89,-89,-89,-89,-81,-82,-43,160,-91,-91,-77,-78,-79,-80,-83,-69,-72,-73,-76,-70,-71,-74,-75,]),'LTHAN':([103,108,109,110,111,112,113,114,115,128,130,133,134,135,136,137,138,139,152,167,170,171,174,209,210,211,212,],[-88,-86,-86,-86,-89,-89,-89,-89,-81,-82,-43,161,-91,-91,-77,-78,-79,-80,-83,-69,-72,-73,-76,-70,-71,-74,-75,]),'GTHANEQ':([103,108,109,110,111,112,113,114,115,128,130,133,134,135,136,137,138,139,152,167,170,171,174,209,210,211,212,],[-88,-86,-86,-86,-89,-89,-89,-89,-81,-82,-43,162,-91,-91,-77,-78,-79,-80,-83,-69,-72,-73,-76,-70,-71,-74,-75,]),'LTHANEQ':([103,108,109,110,111,112,113,114,115,128,130,133,134,135,136,137,138,139,152,167,170,171,174,209,210,211,212,],[-88,-86,-86,-86,-89,-89,-89,-89,-81,-82,-43,163,-91,-91,-77,-78,-79,-80,-83,-69,-72,-73,-76,-70,-71,-74,-75,]),'DIFFERENT':([103,108,109,110,111,112,113,114,115,128,130,133,134,135,136,137,138,139,152,167,170,171,174,209,210,211,212,],[-88,-86,-86,-86,-89,-89,-89,-89,-81,-82,-43,164,-91,-91,-77,-78,-79,-80,-83,-69,-72,-73,-76,-70,-71,-74,-75,]),'EQUALS':([103,108,109,110,111,112,113,114,115,128,130,133,134,135,136,137,138,139,152,167,170,171,174,209,210,211,212,],[-88,-86,-86,-86,-89,-89,-89,-89,-81,-82,-43,165,-91,-91,-77,-78,-79,-80,-83,-69,-72,-73,-76,-70,-71,-74,-75,]),'AND':([103,107,108,109,110,111,112,113,114,115,128,130,132,133,134,135,136,137,138,139,152,159,166,167,170,171,174,203,204,205,206,207,208,209,210,211,212,],[-88,-86,-86,-86,-86,-89,-89,-89,-89,-81,-82,-43,157,-91,-91,-91,-77,-78,-79,-80,-83,-61,-68,-69,-72,-73,-76,-62,-63,-64,-65,-66,-67,-70,-71,-74,-75,]),'OR':([103,106,107,108,109,110,111,112,113,114,115,128,130,131,132,133,134,135,136,137,138,139,152,156,158,159,166,167,170,171,174,202,203,204,205,206,207,208,209,210,211,212,],[-88,-86,-86,-86,-86,-86,-89,-89,-89,-89,-81,-82,-43,154,-91,-91,-91,-91,-77,-78,-79,-80,-83,-58,-60,-61,-68,-69,-72,-73,-76,-59,-62,-63,-64,-65,-66,-67,-70,-71,-74,-75,]),'THEN':([145,],[179,]),'TO':([178,],[197,]),'ELSE':([217,],[220,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'addProgram':([3,],[4,]),'programa1':([5,],[6,]),'vars':([5,50,58,59,],[7,56,63,64,]),'empty':([5,7,29,30,31,37,44,45,50,58,59,60,66,83,84,91,126,131,132,133,134,135,142,148,180,198,217,218,223,],[9,13,36,39,42,48,42,42,9,9,9,67,67,67,67,39,13,155,158,166,170,174,177,13,67,67,221,67,67,]),'funcion':([7,126,148,],[11,150,181,]),'vars1':([8,29,],[14,35,]),'tipo':([8,12,29,31,44,45,62,],[15,22,15,43,43,43,82,]),'principal':([11,],[20,]),'vars2':([15,47,93,],[24,54,116,]),'addMain':([21,],[26,]),'addVariable':([25,51,81,99,],[30,57,98,123,]),'addFunction':([27,28,],[32,33,]),'varsadd':([29,],[34,]),'arr':([30,91,],[37,102,]),'parameters':([31,44,45,],[40,52,53,]),'parameters2':([31,44,45,],[41,41,41,]),'vars3':([37,],[46,]),'parameters3':([57,98,123,],[61,122,147,]),'estatuto':([60,66,83,84,180,198,218,223,],[65,86,100,101,199,214,222,225,]),'estatuto2':([60,66,83,84,180,198,218,223,],[66,66,66,66,66,66,66,66,]),'asignacion':([60,66,83,84,119,180,198,218,223,],[68,68,68,68,143,68,68,68,68,]),'llamada':([60,66,83,84,92,96,97,104,118,151,180,184,185,186,187,188,189,190,191,192,193,194,195,197,198,218,223,],[69,69,69,69,115,115,115,115,115,115,69,115,115,115,115,115,115,115,115,115,115,115,115,115,69,69,69,]),'lectura':([60,66,83,84,180,198,218,223,],[70,70,70,70,70,70,70,70,]),'escritura':([60,66,83,84,180,198,218,223,],[71,71,71,71,71,71,71,71,]),'for':([60,66,83,84,180,198,218,223,],[72,72,72,72,72,72,72,72,]),'if':([60,66,83,84,180,198,218,223,],[73,73,73,73,73,73,73,73,]),'while':([60,66,83,84,180,198,218,223,],[74,74,74,74,74,74,74,74,]),'addId':([75,144,],[91,91,]),'expresion':([92,96,97,104,118,151,184,197,],[105,120,121,129,142,183,201,213,]),'nexp':([92,96,97,104,118,151,184,185,197,],[106,106,106,106,106,106,106,202,106,]),'comexp':([92,96,97,104,118,151,184,185,197,],[107,107,107,107,107,107,107,107,107,]),'sumexp':([92,96,97,104,118,151,184,185,186,187,188,189,190,191,192,193,197,],[108,108,108,108,108,108,108,108,203,204,205,206,207,208,209,210,108,]),'mulexp':([92,96,97,104,118,151,184,185,186,187,188,189,190,191,192,193,194,195,197,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,211,212,109,]),'pexp':([92,96,97,104,118,151,184,185,186,187,188,189,190,191,192,193,194,195,197,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'escritura1':([94,176,],[117,196,]),'printOperator':([94,176,],[118,118,]),'retorno':([100,],[124,]),'addOperandVar':([103,],[128,]),'genQuad':([106,107,108,109,110,],[131,132,133,134,135,]),'addOperandCte':([111,112,113,114,],[136,137,138,139,]),'addOperator':([127,154,157,160,161,162,163,164,165,168,169,172,173,],[151,184,185,186,187,188,189,190,191,192,193,194,195,]),'expresion1':([131,],[153,]),'nexp1':([132,],[156,]),'compex1':([133,],[159,]),'sumexp1':([134,],[167,]),'mulexp1':([135,],[171,]),'escritura2':([142,],[175,]),'quadEqual':([183,],[200,]),'else':([217,],[219,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID addProgram SEMICOLON programa1 END','programa',6,'p_programa','LexSint.py',181),
  ('addProgram -> <empty>','addProgram',0,'p_addProgram','LexSint.py',185),
  ('programa1 -> vars funcion principal','programa1',3,'p_programa1','LexSint.py',192),
  ('principal -> MAIN addMain LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto RBRACKET','principal',9,'p_principal','LexSint.py',196),
  ('addMain -> <empty>','addMain',0,'p_addMain','LexSint.py',199),
  ('vars -> VAR vars1','vars',2,'p_vars','LexSint.py',207),
  ('vars -> empty','vars',1,'p_vars','LexSint.py',208),
  ('vars1 -> tipo vars2 SEMICOLON varsadd','vars1',4,'p_vars1','LexSint.py',212),
  ('vars2 -> ID addVariable arr vars3','vars2',4,'p_vars2','LexSint.py',216),
  ('vars3 -> COMMA vars2','vars3',2,'p_vars3','LexSint.py',220),
  ('vars3 -> empty','vars3',1,'p_vars3','LexSint.py',221),
  ('varsadd -> vars1','varsadd',1,'p_varsadd','LexSint.py',225),
  ('varsadd -> empty','varsadd',1,'p_varsadd','LexSint.py',226),
  ('tipo -> INT','tipo',1,'p_tipo','LexSint.py',230),
  ('tipo -> FLOAT','tipo',1,'p_tipo','LexSint.py',231),
  ('tipo -> CHAR','tipo',1,'p_tipo','LexSint.py',232),
  ('tipo -> STRING','tipo',1,'p_tipo','LexSint.py',233),
  ('arr -> LSQRBRACKET CTEI RSQRBRACKET','arr',3,'p_arr','LexSint.py',242),
  ('arr -> empty','arr',1,'p_arr','LexSint.py',243),
  ('parameters -> parameters2','parameters',1,'p_parameters','LexSint.py',248),
  ('parameters -> empty','parameters',1,'p_parameters','LexSint.py',249),
  ('parameters2 -> tipo ID addVariable','parameters2',3,'p_parameters2','LexSint.py',253),
  ('parameters2 -> tipo ID addVariable parameters3','parameters2',4,'p_parameters2','LexSint.py',254),
  ('parameters3 -> COMMA ID addVariable parameters3','parameters3',4,'p_parameters3','LexSint.py',258),
  ('parameters3 -> COMMA tipo ID addVariable parameters3','parameters3',5,'p_parameters3','LexSint.py',259),
  ('parameters3 -> COMMA ID addVariable','parameters3',3,'p_parameters3','LexSint.py',260),
  ('parameters3 -> COMMA tipo ID addVariable','parameters3',4,'p_parameters3','LexSint.py',261),
  ('funcion -> FUNCTION tipo ID addFunction LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto retorno RBRACKET funcion','funcion',13,'p_funcion','LexSint.py',266),
  ('funcion -> FUNCTION VOID ID addFunction LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto RBRACKET funcion','funcion',12,'p_funcion','LexSint.py',267),
  ('funcion -> empty','funcion',1,'p_funcion','LexSint.py',268),
  ('addFunction -> <empty>','addFunction',0,'p_addFunction','LexSint.py',271),
  ('retorno -> RETURN ID SEMICOLON','retorno',3,'p_retorno','LexSint.py',280),
  ('estatuto -> estatuto2 estatuto','estatuto',2,'p_estatuto','LexSint.py',285),
  ('estatuto -> empty','estatuto',1,'p_estatuto','LexSint.py',286),
  ('estatuto2 -> asignacion SEMICOLON','estatuto2',2,'p_estatuto2','LexSint.py',290),
  ('estatuto2 -> llamada SEMICOLON','estatuto2',2,'p_estatuto2','LexSint.py',291),
  ('estatuto2 -> lectura SEMICOLON','estatuto2',2,'p_estatuto2','LexSint.py',292),
  ('estatuto2 -> escritura SEMICOLON','estatuto2',2,'p_estatuto2','LexSint.py',293),
  ('estatuto2 -> for','estatuto2',1,'p_estatuto2','LexSint.py',294),
  ('estatuto2 -> if','estatuto2',1,'p_estatuto2','LexSint.py',295),
  ('estatuto2 -> while','estatuto2',1,'p_estatuto2','LexSint.py',296),
  ('asignacion -> ID addId arr EQUAL addOperator expresion quadEqual','asignacion',7,'p_asignacion','LexSint.py',300),
  ('llamada -> ID LPARENTHESIS expresion RPARENTHESIS','llamada',4,'p_llamada','LexSint.py',304),
  ('lectura -> READ LPARENTHESIS vars2 RPARENTHESIS','lectura',4,'p_lectura','LexSint.py',308),
  ('escritura -> PRINT LPARENTHESIS escritura1 RPARENTHESIS','escritura',4,'p_escritura','LexSint.py',312),
  ('escritura1 -> printOperator expresion escritura2','escritura1',3,'p_escritura1','LexSint.py',316),
  ('escritura2 -> COMMA escritura1','escritura2',2,'p_escritura2','LexSint.py',320),
  ('escritura2 -> empty','escritura2',1,'p_escritura2','LexSint.py',321),
  ('printOperator -> <empty>','printOperator',0,'p_printOperator','LexSint.py',324),
  ('for -> FOR LPARENTHESIS FROM asignacion COMMA TO expresion RPARENTHESIS LBRACKET estatuto RBRACKET','for',11,'p_for','LexSint.py',330),
  ('if -> IF LPARENTHESIS expresion RPARENTHESIS THEN LBRACKET estatuto RBRACKET else','if',9,'p_if','LexSint.py',334),
  ('else -> ELSE LBRACKET estatuto RBRACKET','else',4,'p_else','LexSint.py',338),
  ('else -> empty','else',1,'p_else','LexSint.py',339),
  ('while -> WHILE LPARENTHESIS expresion RPARENTHESIS LBRACKET estatuto RBRACKET','while',7,'p_while','LexSint.py',343),
  ('expresion -> nexp genQuad expresion1','expresion',3,'p_expresion','LexSint.py',348),
  ('expresion1 -> OR addOperator expresion','expresion1',3,'p_expresion1','LexSint.py',352),
  ('expresion1 -> empty','expresion1',1,'p_expresion1','LexSint.py',353),
  ('nexp -> comexp genQuad nexp1','nexp',3,'p_nexp','LexSint.py',357),
  ('nexp1 -> AND addOperator nexp','nexp1',3,'p_nexp1','LexSint.py',361),
  ('nexp1 -> empty','nexp1',1,'p_nexp1','LexSint.py',362),
  ('comexp -> sumexp genQuad compex1','comexp',3,'p_comexp','LexSint.py',366),
  ('compex1 -> GTHAN addOperator sumexp','compex1',3,'p_compex1','LexSint.py',370),
  ('compex1 -> LTHAN addOperator sumexp','compex1',3,'p_compex1','LexSint.py',371),
  ('compex1 -> GTHANEQ addOperator sumexp','compex1',3,'p_compex1','LexSint.py',372),
  ('compex1 -> LTHANEQ addOperator sumexp','compex1',3,'p_compex1','LexSint.py',373),
  ('compex1 -> DIFFERENT addOperator sumexp','compex1',3,'p_compex1','LexSint.py',374),
  ('compex1 -> EQUALS addOperator sumexp','compex1',3,'p_compex1','LexSint.py',375),
  ('compex1 -> empty','compex1',1,'p_compex1','LexSint.py',376),
  ('sumexp -> mulexp genQuad sumexp1','sumexp',3,'p_sumexp','LexSint.py',380),
  ('sumexp1 -> PLUS addOperator sumexp','sumexp1',3,'p_sumexp1','LexSint.py',384),
  ('sumexp1 -> MINUS addOperator sumexp','sumexp1',3,'p_sumexp1','LexSint.py',385),
  ('sumexp1 -> empty','sumexp1',1,'p_sumexp1','LexSint.py',386),
  ('mulexp -> pexp genQuad mulexp1','mulexp',3,'p_mulexp','LexSint.py',390),
  ('mulexp1 -> MULTIPLICATION addOperator mulexp','mulexp1',3,'p_mulexp1','LexSint.py',394),
  ('mulexp1 -> DIVISION addOperator mulexp','mulexp1',3,'p_mulexp1','LexSint.py',395),
  ('mulexp1 -> empty','mulexp1',1,'p_mulexp1','LexSint.py',396),
  ('pexp -> CTEI addOperandCte','pexp',2,'p_pexp','LexSint.py',400),
  ('pexp -> CTEF addOperandCte','pexp',2,'p_pexp','LexSint.py',401),
  ('pexp -> CTEC addOperandCte','pexp',2,'p_pexp','LexSint.py',402),
  ('pexp -> CTESTRING addOperandCte','pexp',2,'p_pexp','LexSint.py',403),
  ('pexp -> llamada','pexp',1,'p_pexp','LexSint.py',404),
  ('pexp -> ID addOperandVar','pexp',2,'p_pexp','LexSint.py',405),
  ('pexp -> LPARENTHESIS expresion RPARENTHESIS','pexp',3,'p_pexp','LexSint.py',406),
  ('addVariable -> <empty>','addVariable',0,'p_addVariable','LexSint.py',409),
  ('quadEqual -> <empty>','quadEqual',0,'p_quadEqual','LexSint.py',418),
  ('genQuad -> <empty>','genQuad',0,'p_genQuad','LexSint.py',443),
  ('addOperator -> <empty>','addOperator',0,'p_addOperator','LexSint.py',466),
  ('addOperandVar -> <empty>','addOperandVar',0,'p_addOperandVar','LexSint.py',472),
  ('addOperandCte -> <empty>','addOperandCte',0,'p_addOperandCte','LexSint.py',483),
  ('addId -> <empty>','addId',0,'p_addId','LexSint.py',498),
  ('empty -> <empty>','empty',0,'p_empty','LexSint.py',511),
]
