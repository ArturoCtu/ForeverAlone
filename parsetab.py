
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLICATIONDIVISIONrightEQUALSleftANDORAND CHAR COMMA CTEC CTEF CTEI CTESTRING DIFFERENT DIVISION ELSE END EQUALS FLOAT FOR FROM FUNCTION GTHAN GTHANEQ ID IF INT LBRACKET LPARENTHESIS LSQRBRACKET LTHAN LTHANEQ MAIN MINUS MULTIPLICATION OR PLUS PRINT PROGRAM RBRACKET READ RETURN RPARENTHESIS RSQRBRACKET SEMICOLON STRING THEN TO VAR VOID WHILE\n    programa : PROGRAM ID SEMICOLON programa1 END\n    \n    programa1 : vars funcion principal \n    \n    principal : MAIN LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto RBRACKET\n    \n    vars : VAR vars1\n        | empty\n    \n    vars1 : tipo vars2 SEMICOLON varsadd\n    \n    vars2 : ID arr vars3\n    \n    vars3 : COMMA vars2\n        | empty\n    \n    varsadd : vars1\n        | empty\n    \n    tipo : INT \n        | FLOAT\n        | CHAR \n        | STRING\n    \n\tarr : LSQRBRACKET CTEI RSQRBRACKET\n        | empty\n\t\n    parameters : parameters2\n    \t| empty\n    \n\tparameters2 : tipo ID\n\t\t| tipo ID parameters3 \n\t\n\tparameters3 : COMMA ID parameters3\n\t\t| COMMA tipo ID parameters3\n\t\t| COMMA ID\n\t\t| COMMA tipo ID\n\t\n\tfuncion : FUNCTION tipo ID LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto retorno RBRACKET funcion\n\t\t| FUNCTION VOID ID LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto RBRACKET funcion\n        | empty\n\t\n\tretorno : RETURN ID SEMICOLON\n\t\n    estatuto : estatuto2 estatuto\n        | empty\n    \n    estatuto2 : asignacion SEMICOLON\n                | llamada SEMICOLON\n                | lectura SEMICOLON\n                | escritura SEMICOLON\n                | for\n                | if\n                | while\n    \n    asignacion : ID arr EQUALS expresion \n    \n    llamada : ID LPARENTHESIS expresion RPARENTHESIS \n    \n    lectura : READ LPARENTHESIS vars2 RPARENTHESIS\n    \n    escritura : PRINT LPARENTHESIS escritura1 RPARENTHESIS\n    \n    escritura1 : expresion escritura2 \n    \n    escritura2 : COMMA escritura1\n        | empty \n    \n    for : FOR LPARENTHESIS FROM asignacion COMMA TO expresion RPARENTHESIS LBRACKET estatuto RBRACKET\n    \n    if : IF LPARENTHESIS expresion RPARENTHESIS THEN LBRACKET estatuto RBRACKET else \n    \n    else : ELSE LBRACKET estatuto RBRACKET\n        | empty\n    \n    while : WHILE LPARENTHESIS expresion RPARENTHESIS LBRACKET estatuto RBRACKET\n    \n    expresion : nexp expresion1\n    \n\texpresion1 : OR expresion\n\t\t| empty\n\t\n\tnexp : comexp nexp1\n\t\n\tnexp1 : AND nexp\n\t\t| empty\n\t\n\tcomexp : sumexp compex1\n\t\n\tcompex1 : GTHAN sumexp\n\t\t| LTHAN sumexp\n\t\t| GTHANEQ sumexp\n\t\t| LTHANEQ sumexp\n\t\t| DIFFERENT sumexp\n\t\t| empty\n\t\n\tsumexp : mulexp sumexp1\n\t\n\tsumexp1 : PLUS sumexp\n\t\t| MINUS sumexp\n\t\t| empty\n\t\n\tmulexp : pexp mulexp1\n\t\n\tmulexp1 : MULTIPLICATION mulexp\n\t\t| DIVISION mulexp\n\t\t| empty\n\t\n\tpexp : CTEI\n\t\t| CTEF\n\t\t| CTEC\n\t\t| CTESTRING\n\t\t| llamada\n\t\t| ID\n\t\t| LPARENTHESIS expresion RPARENTHESIS\n\t\n    empty : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,9,],[0,-1,]),'ID':([2,14,15,16,17,18,21,22,35,42,53,56,58,62,68,69,70,79,80,83,84,85,86,88,89,90,92,93,97,99,114,118,124,127,130,131,132,133,134,137,138,141,142,147,171,174,175,179,181,182,183,185,187,188,190,],[3,24,-12,-13,-14,-15,26,27,46,24,57,71,78,71,-36,-37,-38,71,71,-32,-33,-34,-35,98,24,98,98,98,98,98,150,154,98,98,98,98,98,98,98,98,98,98,98,98,71,98,71,-50,-79,71,-47,-49,71,-46,-48,]),'SEMICOLON':([3,23,24,29,31,41,43,49,50,64,65,66,67,98,101,102,103,104,105,106,107,108,109,110,120,122,123,125,126,128,129,135,136,139,140,143,144,145,154,156,157,158,159,160,161,162,163,164,165,166,167,],[4,28,-79,-79,-17,-7,-9,-8,-16,83,84,85,86,-77,-79,-79,-79,-79,-79,-72,-73,-74,-75,-76,-39,-40,-51,-53,-54,-56,-57,-63,-64,-67,-68,-71,-41,-42,173,-78,-52,-55,-58,-59,-60,-61,-62,-65,-66,-69,-70,]),'VAR':([4,45,54,55,],[7,7,7,7,]),'FUNCTION':([4,6,8,13,28,38,39,40,119,153,],[-79,11,-5,-4,-79,-6,-10,-11,11,11,]),'MAIN':([4,6,8,10,12,13,28,38,39,40,119,153,155,172,],[-79,-79,-5,20,-28,-4,-79,-6,-10,-11,-79,-79,-27,-26,]),'END':([5,19,81,],[9,-2,-3,]),'INT':([7,11,25,28,36,37,53,],[15,15,15,15,15,15,15,]),'FLOAT':([7,11,25,28,36,37,53,],[16,16,16,16,16,16,16,]),'CHAR':([7,11,25,28,36,37,53,],[17,17,17,17,17,17,17,]),'STRING':([7,11,25,28,36,37,53,],[18,18,18,18,18,18,18,]),'LBRACKET':([8,13,28,38,39,40,45,51,54,55,59,60,152,170,180,184,],[-5,-4,-79,-6,-10,-11,-79,56,-79,-79,79,80,171,175,182,187,]),'VOID':([11,],[22,]),'LPARENTHESIS':([20,26,27,71,72,73,74,75,76,88,90,92,93,97,98,99,124,127,130,131,132,133,134,137,138,141,142,147,174,],[25,36,37,88,89,90,91,92,93,99,99,99,99,99,88,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'LSQRBRACKET':([24,71,150,],[30,30,30,]),'COMMA':([24,29,31,46,50,57,78,98,101,102,103,104,105,106,107,108,109,110,113,120,122,123,125,126,128,129,135,136,139,140,143,149,156,157,158,159,160,161,162,163,164,165,166,167,],[-79,42,-17,53,-16,53,53,-77,-79,-79,-79,-79,-79,-72,-73,-74,-75,-76,147,-39,-40,-51,-53,-54,-56,-57,-63,-64,-67,-68,-71,169,-78,-52,-55,-58,-59,-60,-61,-62,-65,-66,-69,-70,]),'RPARENTHESIS':([24,25,29,31,32,33,34,36,37,41,43,46,47,48,49,50,52,57,77,78,94,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,121,122,123,125,126,128,129,135,136,139,140,143,146,148,156,157,158,159,160,161,162,163,164,165,166,167,168,177,],[-79,-79,-79,-17,45,-18,-19,-79,-79,-7,-9,-20,54,55,-8,-16,-21,-24,-22,-25,-23,-77,122,-79,-79,-79,-79,-79,-72,-73,-74,-75,-76,144,145,-79,151,152,156,-40,-51,-53,-54,-56,-57,-63,-64,-67,-68,-71,-43,-45,-78,-52,-55,-58,-59,-60,-61,-62,-65,-66,-69,-70,-44,180,]),'CTEI':([30,88,90,92,93,97,99,124,127,130,131,132,133,134,137,138,141,142,147,174,],[44,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'EQUALS':([31,50,71,87,150,],[-17,-16,-79,97,-79,]),'RSQRBRACKET':([44,],[50,]),'RBRACKET':([56,61,62,63,68,69,70,80,82,83,84,85,86,96,117,171,173,175,176,178,179,181,182,183,185,186,187,188,189,190,],[-79,81,-79,-31,-36,-37,-38,-79,-30,-32,-33,-34,-35,119,153,-79,-29,-79,179,181,-50,-79,-79,-47,-49,188,-79,-46,190,-48,]),'READ':([56,62,68,69,70,79,80,83,84,85,86,171,175,179,181,182,183,185,187,188,190,],[72,72,-36,-37,-38,72,72,-32,-33,-34,-35,72,72,-50,-79,72,-47,-49,72,-46,-48,]),'PRINT':([56,62,68,69,70,79,80,83,84,85,86,171,175,179,181,182,183,185,187,188,190,],[73,73,-36,-37,-38,73,73,-32,-33,-34,-35,73,73,-50,-79,73,-47,-49,73,-46,-48,]),'FOR':([56,62,68,69,70,79,80,83,84,85,86,171,175,179,181,182,183,185,187,188,190,],[74,74,-36,-37,-38,74,74,-32,-33,-34,-35,74,74,-50,-79,74,-47,-49,74,-46,-48,]),'IF':([56,62,68,69,70,79,80,83,84,85,86,171,175,179,181,182,183,185,187,188,190,],[75,75,-36,-37,-38,75,75,-32,-33,-34,-35,75,75,-50,-79,75,-47,-49,75,-46,-48,]),'WHILE':([56,62,68,69,70,79,80,83,84,85,86,171,175,179,181,182,183,185,187,188,190,],[76,76,-36,-37,-38,76,76,-32,-33,-34,-35,76,76,-50,-79,76,-47,-49,76,-46,-48,]),'RETURN':([62,63,68,69,70,79,82,83,84,85,86,95,179,181,183,185,188,190,],[-79,-31,-36,-37,-38,-79,-30,-32,-33,-34,-35,118,-50,-79,-47,-49,-46,-48,]),'CTEF':([88,90,92,93,97,99,124,127,130,131,132,133,134,137,138,141,142,147,174,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'CTEC':([88,90,92,93,97,99,124,127,130,131,132,133,134,137,138,141,142,147,174,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'CTESTRING':([88,90,92,93,97,99,124,127,130,131,132,133,134,137,138,141,142,147,174,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'FROM':([91,],[114,]),'MULTIPLICATION':([98,105,106,107,108,109,110,122,156,],[-77,141,-72,-73,-74,-75,-76,-40,-78,]),'DIVISION':([98,105,106,107,108,109,110,122,156,],[-77,142,-72,-73,-74,-75,-76,-40,-78,]),'PLUS':([98,104,105,106,107,108,109,110,122,140,143,156,166,167,],[-77,137,-79,-72,-73,-74,-75,-76,-40,-68,-71,-78,-69,-70,]),'MINUS':([98,104,105,106,107,108,109,110,122,140,143,156,166,167,],[-77,138,-79,-72,-73,-74,-75,-76,-40,-68,-71,-78,-69,-70,]),'GTHAN':([98,103,104,105,106,107,108,109,110,122,136,139,140,143,156,164,165,166,167,],[-77,130,-79,-79,-72,-73,-74,-75,-76,-40,-64,-67,-68,-71,-78,-65,-66,-69,-70,]),'LTHAN':([98,103,104,105,106,107,108,109,110,122,136,139,140,143,156,164,165,166,167,],[-77,131,-79,-79,-72,-73,-74,-75,-76,-40,-64,-67,-68,-71,-78,-65,-66,-69,-70,]),'GTHANEQ':([98,103,104,105,106,107,108,109,110,122,136,139,140,143,156,164,165,166,167,],[-77,132,-79,-79,-72,-73,-74,-75,-76,-40,-64,-67,-68,-71,-78,-65,-66,-69,-70,]),'LTHANEQ':([98,103,104,105,106,107,108,109,110,122,136,139,140,143,156,164,165,166,167,],[-77,133,-79,-79,-72,-73,-74,-75,-76,-40,-64,-67,-68,-71,-78,-65,-66,-69,-70,]),'DIFFERENT':([98,103,104,105,106,107,108,109,110,122,136,139,140,143,156,164,165,166,167,],[-77,134,-79,-79,-72,-73,-74,-75,-76,-40,-64,-67,-68,-71,-78,-65,-66,-69,-70,]),'AND':([98,102,103,104,105,106,107,108,109,110,122,129,135,136,139,140,143,156,159,160,161,162,163,164,165,166,167,],[-77,127,-79,-79,-79,-72,-73,-74,-75,-76,-40,-57,-63,-64,-67,-68,-71,-78,-58,-59,-60,-61,-62,-65,-66,-69,-70,]),'OR':([98,101,102,103,104,105,106,107,108,109,110,122,126,128,129,135,136,139,140,143,156,158,159,160,161,162,163,164,165,166,167,],[-77,124,-79,-79,-79,-79,-72,-73,-74,-75,-76,-40,-54,-56,-57,-63,-64,-67,-68,-71,-78,-55,-58,-59,-60,-61,-62,-65,-66,-69,-70,]),'THEN':([151,],[170,]),'TO':([169,],[174,]),'ELSE':([181,],[184,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'programa1':([4,],[5,]),'vars':([4,45,54,55,],[6,51,59,60,]),'empty':([4,6,24,25,28,29,36,37,45,54,55,56,62,71,79,80,101,102,103,104,105,113,119,150,153,171,175,181,182,187,],[8,12,31,34,40,43,34,34,8,8,8,63,63,31,63,63,125,128,135,139,143,148,12,31,12,63,63,185,63,63,]),'funcion':([6,119,153,],[10,155,172,]),'vars1':([7,28,],[13,39,]),'tipo':([7,11,25,28,36,37,53,],[14,21,35,14,35,35,58,]),'principal':([10,],[19,]),'vars2':([14,42,89,],[23,49,111,]),'arr':([24,71,150,],[29,87,87,]),'parameters':([25,36,37,],[32,47,48,]),'parameters2':([25,36,37,],[33,33,33,]),'varsadd':([28,],[38,]),'vars3':([29,],[41,]),'parameters3':([46,57,78,],[52,77,94,]),'estatuto':([56,62,79,80,171,175,182,187,],[61,82,95,96,176,178,186,189,]),'estatuto2':([56,62,79,80,171,175,182,187,],[62,62,62,62,62,62,62,62,]),'asignacion':([56,62,79,80,114,171,175,182,187,],[64,64,64,64,149,64,64,64,64,]),'llamada':([56,62,79,80,88,90,92,93,97,99,124,127,130,131,132,133,134,137,138,141,142,147,171,174,175,182,187,],[65,65,65,65,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,65,110,65,65,65,]),'lectura':([56,62,79,80,171,175,182,187,],[66,66,66,66,66,66,66,66,]),'escritura':([56,62,79,80,171,175,182,187,],[67,67,67,67,67,67,67,67,]),'for':([56,62,79,80,171,175,182,187,],[68,68,68,68,68,68,68,68,]),'if':([56,62,79,80,171,175,182,187,],[69,69,69,69,69,69,69,69,]),'while':([56,62,79,80,171,175,182,187,],[70,70,70,70,70,70,70,70,]),'expresion':([88,90,92,93,97,99,124,147,174,],[100,113,115,116,120,121,157,113,177,]),'nexp':([88,90,92,93,97,99,124,127,147,174,],[101,101,101,101,101,101,101,158,101,101,]),'comexp':([88,90,92,93,97,99,124,127,147,174,],[102,102,102,102,102,102,102,102,102,102,]),'sumexp':([88,90,92,93,97,99,124,127,130,131,132,133,134,137,138,147,174,],[103,103,103,103,103,103,103,103,159,160,161,162,163,164,165,103,103,]),'mulexp':([88,90,92,93,97,99,124,127,130,131,132,133,134,137,138,141,142,147,174,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,166,167,104,104,]),'pexp':([88,90,92,93,97,99,124,127,130,131,132,133,134,137,138,141,142,147,174,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'escritura1':([90,147,],[112,168,]),'retorno':([95,],[117,]),'expresion1':([101,],[123,]),'nexp1':([102,],[126,]),'compex1':([103,],[129,]),'sumexp1':([104,],[136,]),'mulexp1':([105,],[140,]),'escritura2':([113,],[146,]),'else':([181,],[183,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON programa1 END','programa',5,'p_programa','LexSint.py',155),
  ('programa1 -> vars funcion principal','programa1',3,'p_programa1','LexSint.py',160),
  ('principal -> MAIN LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto RBRACKET','principal',8,'p_principal','LexSint.py',164),
  ('vars -> VAR vars1','vars',2,'p_vars','LexSint.py',169),
  ('vars -> empty','vars',1,'p_vars','LexSint.py',170),
  ('vars1 -> tipo vars2 SEMICOLON varsadd','vars1',4,'p_vars1','LexSint.py',174),
  ('vars2 -> ID arr vars3','vars2',3,'p_vars2','LexSint.py',178),
  ('vars3 -> COMMA vars2','vars3',2,'p_vars3','LexSint.py',182),
  ('vars3 -> empty','vars3',1,'p_vars3','LexSint.py',183),
  ('varsadd -> vars1','varsadd',1,'p_varsadd','LexSint.py',187),
  ('varsadd -> empty','varsadd',1,'p_varsadd','LexSint.py',188),
  ('tipo -> INT','tipo',1,'p_tipo','LexSint.py',192),
  ('tipo -> FLOAT','tipo',1,'p_tipo','LexSint.py',193),
  ('tipo -> CHAR','tipo',1,'p_tipo','LexSint.py',194),
  ('tipo -> STRING','tipo',1,'p_tipo','LexSint.py',195),
  ('arr -> LSQRBRACKET CTEI RSQRBRACKET','arr',3,'p_arr','LexSint.py',199),
  ('arr -> empty','arr',1,'p_arr','LexSint.py',200),
  ('parameters -> parameters2','parameters',1,'p_parameters','LexSint.py',205),
  ('parameters -> empty','parameters',1,'p_parameters','LexSint.py',206),
  ('parameters2 -> tipo ID','parameters2',2,'p_parameters2','LexSint.py',210),
  ('parameters2 -> tipo ID parameters3','parameters2',3,'p_parameters2','LexSint.py',211),
  ('parameters3 -> COMMA ID parameters3','parameters3',3,'p_parameters3','LexSint.py',215),
  ('parameters3 -> COMMA tipo ID parameters3','parameters3',4,'p_parameters3','LexSint.py',216),
  ('parameters3 -> COMMA ID','parameters3',2,'p_parameters3','LexSint.py',217),
  ('parameters3 -> COMMA tipo ID','parameters3',3,'p_parameters3','LexSint.py',218),
  ('funcion -> FUNCTION tipo ID LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto retorno RBRACKET funcion','funcion',12,'p_funcion','LexSint.py',223),
  ('funcion -> FUNCTION VOID ID LPARENTHESIS parameters RPARENTHESIS vars LBRACKET estatuto RBRACKET funcion','funcion',11,'p_funcion','LexSint.py',224),
  ('funcion -> empty','funcion',1,'p_funcion','LexSint.py',225),
  ('retorno -> RETURN ID SEMICOLON','retorno',3,'p_retorno','LexSint.py',229),
  ('estatuto -> estatuto2 estatuto','estatuto',2,'p_estatuto','LexSint.py',234),
  ('estatuto -> empty','estatuto',1,'p_estatuto','LexSint.py',235),
  ('estatuto2 -> asignacion SEMICOLON','estatuto2',2,'p_estatuto2','LexSint.py',239),
  ('estatuto2 -> llamada SEMICOLON','estatuto2',2,'p_estatuto2','LexSint.py',240),
  ('estatuto2 -> lectura SEMICOLON','estatuto2',2,'p_estatuto2','LexSint.py',241),
  ('estatuto2 -> escritura SEMICOLON','estatuto2',2,'p_estatuto2','LexSint.py',242),
  ('estatuto2 -> for','estatuto2',1,'p_estatuto2','LexSint.py',243),
  ('estatuto2 -> if','estatuto2',1,'p_estatuto2','LexSint.py',244),
  ('estatuto2 -> while','estatuto2',1,'p_estatuto2','LexSint.py',245),
  ('asignacion -> ID arr EQUALS expresion','asignacion',4,'p_asignacion','LexSint.py',249),
  ('llamada -> ID LPARENTHESIS expresion RPARENTHESIS','llamada',4,'p_llamada','LexSint.py',253),
  ('lectura -> READ LPARENTHESIS vars2 RPARENTHESIS','lectura',4,'p_lectura','LexSint.py',257),
  ('escritura -> PRINT LPARENTHESIS escritura1 RPARENTHESIS','escritura',4,'p_escritura','LexSint.py',261),
  ('escritura1 -> expresion escritura2','escritura1',2,'p_escritura1','LexSint.py',265),
  ('escritura2 -> COMMA escritura1','escritura2',2,'p_escritura2','LexSint.py',269),
  ('escritura2 -> empty','escritura2',1,'p_escritura2','LexSint.py',270),
  ('for -> FOR LPARENTHESIS FROM asignacion COMMA TO expresion RPARENTHESIS LBRACKET estatuto RBRACKET','for',11,'p_for','LexSint.py',274),
  ('if -> IF LPARENTHESIS expresion RPARENTHESIS THEN LBRACKET estatuto RBRACKET else','if',9,'p_if','LexSint.py',278),
  ('else -> ELSE LBRACKET estatuto RBRACKET','else',4,'p_else','LexSint.py',282),
  ('else -> empty','else',1,'p_else','LexSint.py',283),
  ('while -> WHILE LPARENTHESIS expresion RPARENTHESIS LBRACKET estatuto RBRACKET','while',7,'p_while','LexSint.py',287),
  ('expresion -> nexp expresion1','expresion',2,'p_expresion','LexSint.py',292),
  ('expresion1 -> OR expresion','expresion1',2,'p_expresion1','LexSint.py',296),
  ('expresion1 -> empty','expresion1',1,'p_expresion1','LexSint.py',297),
  ('nexp -> comexp nexp1','nexp',2,'p_nexp','LexSint.py',301),
  ('nexp1 -> AND nexp','nexp1',2,'p_nexp1','LexSint.py',305),
  ('nexp1 -> empty','nexp1',1,'p_nexp1','LexSint.py',306),
  ('comexp -> sumexp compex1','comexp',2,'p_comexp','LexSint.py',310),
  ('compex1 -> GTHAN sumexp','compex1',2,'p_compex1','LexSint.py',314),
  ('compex1 -> LTHAN sumexp','compex1',2,'p_compex1','LexSint.py',315),
  ('compex1 -> GTHANEQ sumexp','compex1',2,'p_compex1','LexSint.py',316),
  ('compex1 -> LTHANEQ sumexp','compex1',2,'p_compex1','LexSint.py',317),
  ('compex1 -> DIFFERENT sumexp','compex1',2,'p_compex1','LexSint.py',318),
  ('compex1 -> empty','compex1',1,'p_compex1','LexSint.py',319),
  ('sumexp -> mulexp sumexp1','sumexp',2,'p_sumexp','LexSint.py',323),
  ('sumexp1 -> PLUS sumexp','sumexp1',2,'p_sumexp1','LexSint.py',327),
  ('sumexp1 -> MINUS sumexp','sumexp1',2,'p_sumexp1','LexSint.py',328),
  ('sumexp1 -> empty','sumexp1',1,'p_sumexp1','LexSint.py',329),
  ('mulexp -> pexp mulexp1','mulexp',2,'p_mulexp','LexSint.py',333),
  ('mulexp1 -> MULTIPLICATION mulexp','mulexp1',2,'p_mulexp1','LexSint.py',337),
  ('mulexp1 -> DIVISION mulexp','mulexp1',2,'p_mulexp1','LexSint.py',338),
  ('mulexp1 -> empty','mulexp1',1,'p_mulexp1','LexSint.py',339),
  ('pexp -> CTEI','pexp',1,'p_pexp','LexSint.py',343),
  ('pexp -> CTEF','pexp',1,'p_pexp','LexSint.py',344),
  ('pexp -> CTEC','pexp',1,'p_pexp','LexSint.py',345),
  ('pexp -> CTESTRING','pexp',1,'p_pexp','LexSint.py',346),
  ('pexp -> llamada','pexp',1,'p_pexp','LexSint.py',347),
  ('pexp -> ID','pexp',1,'p_pexp','LexSint.py',348),
  ('pexp -> LPARENTHESIS expresion RPARENTHESIS','pexp',3,'p_pexp','LexSint.py',349),
  ('empty -> <empty>','empty',0,'p_empty','LexSint.py',353),
]
